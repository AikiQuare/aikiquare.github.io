<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/18/hello-world/"/>
    <url>/2022/07/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HDLBits Codes Collation</title>
    <link href="/2022/06/16/HDLBits%20Codes%20Collation/"/>
    <url>/2022/06/16/HDLBits%20Codes%20Collation/</url>
    
    <content type="html"><![CDATA[<h1 id="HDLBits-Codes-Collation"><a href="#HDLBits-Codes-Collation" class="headerlink" title="HDLBits Codes Collation"></a>HDLBits Codes Collation</h1><hr><h2 id="Write-in-front"><a href="#Write-in-front" class="headerlink" title="Write in front"></a>Write in front</h2><p>This document is intended to help more quickly and better use of HDLBits, for learning Verilog and digital circuits is very helpful, all the code is written in my own based on the horizontal comparison of some other good code and collated, each problem have the corresponding reference code.</p><p><strong>Attention</strong> The following code is for reference only! Does not guarantee that the code has absolute design priority or excellent performance. Some of the problem may not have any analysis, It depends entirely on the number of mistakes I make while trying to answer the questions. Please grasp the method and details of using this document by yourself.</p><h2 id="Related-materials"><a href="#Related-materials" class="headerlink" title="Related materials"></a>Related materials</h2><p>&#x2F;share&#x2F;public&#x2F;rd&#x2F;Verilog<code>verilog_tutorial.pdf</code> <code>verilog_operators.pdf</code> <code>03-verilog-11.pdf</code> <code>Handout.verilog6.pdf</code></p><p>&#x2F;share&#x2F;rd&#x2F;programming&#x2F;Verilog<code>SystemVerilog_1800-2012 (IEEE Standard for SystemVerilog).pdf</code></p><p>Learning Website:</p><p><a href="https://hdlbits.01xz.net/">HDLBits</a>: Training and checking the level of ability to write verilog code.</p><p><a href="https://www.chipverify.com/verilog/verilog-tutorial">Verilog Tutorial</a>: Learn basic syntax, components and classical digital circuit components.</p><p><a href="https://www.tutorialspoint.com/digital_circuits/index.htm">Digital Circuits Tutorial</a>: Learn how to analyze and implement the combinational circuits and sequential circuits.</p><p>Related websites:</p><p><a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register#Applications">Linear-feedback shift register (LFSR)</a>,<a href="https://en.wikipedia.org/wiki/Finite-state_machine">Finite-state machine (FSM)</a>,<a href="https://en.wikipedia.org/wiki/Cellular_automaton">Cellular automaton (CA)</a>,<a href="https://en.wikipedia.org/wiki/Branch_predictor">Branch predictor (BP)</a>,<a href="https://en.wikipedia.org/wiki/Race_condition">Race condition (Race hazard)</a>……</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h5 id="Getting-Started-1"><a href="#Getting-Started-1" class="headerlink" title="Getting Started"></a>Getting Started</h5><p><strong>Step one</strong></p><p>Entire process: </p><p><code>Analyze the problem</code> —-&gt; <code>Writing Code</code> —-&gt; <code>Compiling(Logic Synthesis)</code> —-&gt; <code>Simulation</code></p><p>Be aware of the outcome’s status: <code>Compile Error</code><code>Simulation Error</code><code>Incorrect</code><code>Success</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <span class="hljs-keyword">output</span> one );<br><span class="hljs-comment">// Insert your code here</span><br>    <span class="hljs-keyword">assign</span> one = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Output-Zero"><a href="#Output-Zero" class="headerlink" title="Output Zero"></a>Output Zero</h5><p><strong>Zero</strong></p><p>Note: HDLBits uses Verilog-2001 ANSI-style port declaration syntax, it’s easier to read and reduces typos. The code given for this problem is already a complete statement, so there is no need to add any new code.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">output</span> zero<br>);<span class="hljs-comment">// Module body starts after semicolon</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="Verilog-Language"><a href="#Verilog-Language" class="headerlink" title="Verilog Language"></a>Verilog Language</h2><h4 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h4><h5 id="Simple-wire"><a href="#Simple-wire" class="headerlink" title="Simple wire"></a>Simple wire</h5><p><strong>Wire</strong></p><p>The Problem Diagram is below:</p><p><img src="https://hdlbits.01xz.net/mw/thumb.php?f=Wire.png&width=800" alt="File:Wire.png"></p><p>Connecting the output signal to the input signal:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <span class="hljs-keyword">input</span> in, <span class="hljs-keyword">output</span> out );<br><span class="hljs-comment">//connect the output signal to the input signal</span><br>    <span class="hljs-keyword">assign</span> out = in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Four-wires"><a href="#Four-wires" class="headerlink" title="Four wires"></a>Four wires</h5><p><strong>Wire4</strong></p><p>Note the linkage of variables: <code>a -&gt; w</code><code>b -&gt; x</code><code>b -&gt; y</code><code>c -&gt; z</code>, When you have multiple assign statements, the <strong>order</strong> in which they <strong>appear</strong> in the code <strong>does not matter</strong>. The Problem Diagram is below:</p><p><img src="https://hdlbits.01xz.net/mw/thumb.php?f=Wire4.png&width=800" alt="File:Wire4.png"></p><p>Connect the corresponding outputs to the input signals as in the previous question, the concatenation operator { signal1, signal2, signal3, …} would be useful here.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a,b,c,<br>    <span class="hljs-keyword">output</span> w,x,y,z );<br>    <span class="hljs-keyword">assign</span> &#123;w,x,y,z&#125; = &#123;a,b,b,c&#125;; <span class="hljs-comment">//concatenation operator using example</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Inverter"><a href="#Inverter" class="headerlink" title="Inverter"></a>Inverter</h5><p><strong>Notgate</strong></p><p>We need to pay attention to similarity and differences between bitwise-NOT (~) and logical-NOT (!) operators, when working with a one-bit here, it doesn’t matter which we choose.</p><p><img src="https://hdlbits.01xz.net/mw/images/9/9e/Notgate.png" alt="Notgate.png"></p><p>we can view it as a NOT gate</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <span class="hljs-keyword">input</span> in, <span class="hljs-keyword">output</span> out );<br>    <span class="hljs-keyword">assign</span> out = ~in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="AND-gate"><a href="#AND-gate" class="headerlink" title="AND gate"></a>AND gate</h5><p><strong>Andgate</strong></p><p>Analogy to the previous question, we can get the solution easily.</p><p><img src="https://hdlbits.01xz.net/mw/images/7/78/Andgate.png" alt="File:Andgate.png"></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a, <br>    <span class="hljs-keyword">input</span> b, <br>    <span class="hljs-keyword">output</span> out );<br><span class="hljs-keyword">assign</span> out = a &amp; b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="NOR-gate"><a href="#NOR-gate" class="headerlink" title="NOR gate"></a>NOR gate</h5><p><strong>Norgate</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a, <br>    <span class="hljs-keyword">input</span> b, <br>    <span class="hljs-keyword">output</span> out );<br>    <span class="hljs-keyword">assign</span> out = !(b | a);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="XNOR-gate"><a href="#XNOR-gate" class="headerlink" title="XNOR gate"></a>XNOR gate</h5><p><strong>Xnorgate</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a, <br>    <span class="hljs-keyword">input</span> b, <br>    <span class="hljs-keyword">output</span> out );<br><span class="hljs-keyword">assign</span> out = a ~^ b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Declaring-wires"><a href="#Declaring-wires" class="headerlink" title="Declaring wires"></a>Declaring wires</h5><p><strong>Wire decl</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">default_nettype</span> none</span><br><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out,<br>    <span class="hljs-keyword">output</span> out_n   ); <br><span class="hljs-keyword">wire</span> firwire;<br>    <span class="hljs-keyword">wire</span> secwire;<br><span class="hljs-keyword">assign</span> firwire = a &amp; b;<br>    <span class="hljs-keyword">assign</span> secwire = c &amp; d;<br>    <span class="hljs-keyword">assign</span> out = firwire | secwire;<br>    <span class="hljs-keyword">assign</span> out_n = ~out;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="7458-chip"><a href="#7458-chip" class="headerlink" title="7458 chip"></a>7458 chip</h5><p><strong>7458</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> p1a, p1b, p1c, p1d, p1e, p1f,<br>    <span class="hljs-keyword">output</span> p1y,<br>    <span class="hljs-keyword">input</span> p2a, p2b, p2c, p2d,<br>    <span class="hljs-keyword">output</span> p2y );<br><span class="hljs-keyword">wire</span> w1;<br>    <span class="hljs-keyword">wire</span> w2;<br>    <span class="hljs-keyword">wire</span> w3;<br>    <span class="hljs-keyword">wire</span> w4;<br>    <span class="hljs-keyword">assign</span> w1 = p1a &amp; p1b &amp; p1c;<br>    <span class="hljs-keyword">assign</span> w2 = p1d &amp; p1e &amp; p1f;<br>    <span class="hljs-keyword">assign</span> p1y = w1 | w2;<br>    <span class="hljs-keyword">assign</span> w3 = p2a &amp; p2b;<br>    <span class="hljs-keyword">assign</span> w4 = p2c &amp; p2d;<br>    <span class="hljs-keyword">assign</span> p2y = w3 | w4;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h4><h5 id="Vectors-1"><a href="#Vectors-1" class="headerlink" title="Vectors"></a>Vectors</h5><p><strong>Vector0</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] vec,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] outv,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> o2,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> o1,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> o0  ); <span class="hljs-comment">// Module body starts after module declaration</span><br><span class="hljs-keyword">assign</span> outv = vec;<br>    <span class="hljs-keyword">assign</span> o2 = vec[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">assign</span> o1 = vec[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">assign</span> o0 = vec[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Vectors-in-more-detail"><a href="#Vectors-in-more-detail" class="headerlink" title="Vectors in more detail"></a>Vectors in more detail</h5><p><strong>Vector1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">default_nettype</span> none     </span><span class="hljs-comment">// Disable implicit nets. Reduces some types of bugs.</span><br><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out_hi,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out_lo );<br>    <span class="hljs-keyword">assign</span> out_hi = in [<span class="hljs-number">15</span>:<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">assign</span> out_lo = in [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Vector-part-select"><a href="#Vector-part-select" class="headerlink" title="Vector part select"></a>Vector part select</h5><p><strong>Vector2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] out );<span class="hljs-comment">//</span><br>    <span class="hljs-keyword">assign</span> out[<span class="hljs-number">31</span>:<span class="hljs-number">24</span>] = in[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> out[<span class="hljs-number">23</span>:<span class="hljs-number">16</span>] = in[<span class="hljs-number">15</span>:<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">assign</span> out[<span class="hljs-number">15</span>:<span class="hljs-number">8</span>] = in[<span class="hljs-number">23</span>:<span class="hljs-number">16</span>];<br>    <span class="hljs-keyword">assign</span> out[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] = in[<span class="hljs-number">31</span>:<span class="hljs-number">24</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Bitwise-operators"><a href="#Bitwise-operators" class="headerlink" title="Bitwise operators"></a>Bitwise operators</h5><p><strong>Vectorgates</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] out_or_bitwise,<br>    <span class="hljs-keyword">output</span> out_or_logical,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] out_not<br>);<br>    <span class="hljs-keyword">assign</span> out_or_bitwise[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] = a[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] | b[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> out_or_logical = a || b;<br>    <span class="hljs-keyword">assign</span> out_not = &#123;~b, ~a&#125;;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Four-input-gates"><a href="#Four-input-gates" class="headerlink" title="Four-input gates"></a>Four-input gates</h5><p><strong>Gates4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> out_and,<br>    <span class="hljs-keyword">output</span> out_or,<br>    <span class="hljs-keyword">output</span> out_xor<br>);<br>    <span class="hljs-keyword">assign</span> out_and = &amp;in;<br>    <span class="hljs-keyword">assign</span> out_or = |in;<br>    <span class="hljs-keyword">assign</span> out_xor = ^in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Vector-concatenation-operator"><a href="#Vector-concatenation-operator" class="headerlink" title="Vector concatenation operator"></a>Vector concatenation operator</h5><p><strong>Vector3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] a, b, c, d, e, f,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] w, x, y, z );<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">assign</span> &#123;w, x, y, z&#125; = &#123;a[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>],b[<span class="hljs-number">4</span>:<span class="hljs-number">2</span>],b[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>],c[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>],d[<span class="hljs-number">4</span>],d[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>],e[<span class="hljs-number">4</span>:<span class="hljs-number">1</span>],e[<span class="hljs-number">0</span>],f[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>],<span class="hljs-number">2&#x27;b11</span>&#125;;<br>    <span class="hljs-comment">// assign &#123; ... &#125; = &#123; ... &#125;;</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Vector-reversal-1"><a href="#Vector-reversal-1" class="headerlink" title="Vector reversal 1"></a>Vector reversal 1</h5><p><strong>Vectorr</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out<br>);<br>    <span class="hljs-keyword">assign</span> out[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] = &#123;in[<span class="hljs-number">0</span>],in[<span class="hljs-number">1</span>],in[<span class="hljs-number">2</span>],in[<span class="hljs-number">3</span>],in[<span class="hljs-number">4</span>],in[<span class="hljs-number">5</span>],in[<span class="hljs-number">6</span>],in[<span class="hljs-number">7</span>]&#125;;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Replication-operator"><a href="#Replication-operator" class="headerlink" title="Replication operator"></a>Replication operator</h5><p><strong>Vector4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] out );<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">assign</span> out = &#123; &#123;<span class="hljs-number">24</span>&#123;in[<span class="hljs-number">7</span>]&#125;&#125;, in[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] &#125;;<br>    <span class="hljs-comment">// assign out = &#123; replicate-sign-bit , the-input &#125;;</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="More-replication"><a href="#More-replication" class="headerlink" title="More replication"></a>More replication</h5><p><strong>Vector5</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> a, b, c, d, e,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">24</span>:<span class="hljs-number">0</span>] out );<span class="hljs-comment">//</span><br>    <span class="hljs-keyword">assign</span> out = ~&#123;&#123;<span class="hljs-number">5</span>&#123;a&#125;&#125;, &#123;<span class="hljs-number">5</span>&#123;b&#125;&#125;, &#123;<span class="hljs-number">5</span>&#123;c&#125;&#125;, &#123;<span class="hljs-number">5</span>&#123;d&#125;&#125;, &#123;<span class="hljs-number">5</span>&#123;e&#125;&#125;&#125; ^ &#123;<span class="hljs-number">5</span>&#123;a, b, c, d, e&#125;&#125;;<br>    <span class="hljs-comment">// The output is XNOR of two vectors created by </span><br>    <span class="hljs-comment">// concatenating and replicating the five inputs.</span><br>    <span class="hljs-comment">// assign out = ~&#123; ... &#125; ^ &#123; ... &#125;;</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Modules-Hierarchy"><a href="#Modules-Hierarchy" class="headerlink" title="Modules: Hierarchy"></a>Modules: Hierarchy</h4><h5 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h5><p><strong>Module</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <span class="hljs-keyword">input</span> a, <span class="hljs-keyword">input</span> b, <span class="hljs-keyword">output</span> out );<br>    mod_a mod_list (a, b, out);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Connecting-ports-by-position"><a href="#Connecting-ports-by-position" class="headerlink" title="Connecting ports by position"></a>Connecting ports by position</h5><p><strong>Module pos</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> a, <br>    <span class="hljs-keyword">input</span> b, <br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out1,<br>    <span class="hljs-keyword">output</span> out2<br>);<br>    mod_a mod_list (out1, out2, a, b, c, d);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Connecting-ports-by-name"><a href="#Connecting-ports-by-name" class="headerlink" title="Connecting ports by name"></a>Connecting ports by name</h5><p><strong>Module name</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> a, <br>    <span class="hljs-keyword">input</span> b, <br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out1,<br>    <span class="hljs-keyword">output</span> out2<br>);<br>    mod_a mod_list (<span class="hljs-variable">.out1</span>(out1), <span class="hljs-variable">.out2</span>(out2), <span class="hljs-variable">.in1</span>(a), <span class="hljs-variable">.in2</span>(b), <span class="hljs-variable">.in3</span>(c), <span class="hljs-variable">.in4</span>(d));<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Three-modules"><a href="#Three-modules" class="headerlink" title="Three modules"></a>Three modules</h5><p><strong>Module shift</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <span class="hljs-keyword">input</span> clk, <span class="hljs-keyword">input</span> d, <span class="hljs-keyword">output</span> q );<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] q_net;<br>    my_dff dff0 (<span class="hljs-variable">.d</span>(d), <span class="hljs-variable">.clk</span>(clk), <span class="hljs-variable">.q</span>(q_net[<span class="hljs-number">0</span>]));<br>    my_dff dff1 (<span class="hljs-variable">.d</span>(q_net[<span class="hljs-number">0</span>]), <span class="hljs-variable">.clk</span>(clk), <span class="hljs-variable">.q</span>(q_net[<span class="hljs-number">1</span>]));<br>    my_dff dff2 (<span class="hljs-variable">.d</span>(q_net[<span class="hljs-number">1</span>]), <span class="hljs-variable">.clk</span>(clk), <span class="hljs-variable">.q</span>(q));<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Modules-and-vectors"><a href="#Modules-and-vectors" class="headerlink" title="Modules and vectors"></a>Modules and vectors</h5><p><strong>Module shift8</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> clk, <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] d, <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sel, <br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] q <br>);<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a, b, c;<br>    my_dff8 dff0 (<span class="hljs-variable">.d</span>(d), <span class="hljs-variable">.clk</span>(clk), <span class="hljs-variable">.q</span>(a));<br>    my_dff8 dff1 (<span class="hljs-variable">.d</span>(a), <span class="hljs-variable">.clk</span>(clk), <span class="hljs-variable">.q</span>(b));<br>    my_dff8 dff2 (<span class="hljs-variable">.d</span>(b), <span class="hljs-variable">.clk</span>(clk), <span class="hljs-variable">.q</span>(c));<br>    <br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (sel)<br>            <span class="hljs-number">2&#x27;b00</span> : q &lt;= d;<br>            <span class="hljs-number">2&#x27;b01</span> : q &lt;= a;<br>            <span class="hljs-number">2&#x27;b10</span> : q &lt;= b;<br>            <span class="hljs-number">2&#x27;b11</span> : q &lt;= c;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Adder-1"><a href="#Adder-1" class="headerlink" title="Adder 1"></a>Adder 1</h5><p><strong>Module add</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] sum<br>);<br><span class="hljs-keyword">wire</span> cout;<br>    add16 add0 (a[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], b[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], <span class="hljs-number">1&#x27;b0</span>, sum[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], cout);<br>    add16 add1 (a[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], b[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], cout, sum[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>]);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Adder-2"><a href="#Adder-2" class="headerlink" title="Adder 2"></a>Adder 2</h5><p><strong>Module fadd</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] sum<br>);<span class="hljs-comment">//</span><br>    <span class="hljs-keyword">wire</span> cout;<br>    add16 add_0 (<span class="hljs-variable">.a</span>(a[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>]), <span class="hljs-variable">.b</span>(b[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>]), <span class="hljs-variable">.cin</span>(cout), <span class="hljs-variable">.cout</span>(), <span class="hljs-variable">.sum</span>(sum[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>]));<br>    add16 add_1 (<span class="hljs-variable">.a</span>(a[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]), <span class="hljs-variable">.b</span>(b[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]), <span class="hljs-variable">.cin</span>(<span class="hljs-number">1&#x27;b0</span>), <span class="hljs-variable">.cout</span>(cout), <span class="hljs-variable">.sum</span>(sum[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]));<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> add1 ( <span class="hljs-keyword">input</span> a, <span class="hljs-keyword">input</span> b, <span class="hljs-keyword">input</span> cin,   <span class="hljs-keyword">output</span> sum, <span class="hljs-keyword">output</span> cout );<br><span class="hljs-keyword">assign</span> sum = a ^ b ^ cin;<br>    <span class="hljs-keyword">assign</span> cout = a&amp;b | a&amp;cin | b&amp;cin;<br><span class="hljs-comment">// Full adder module here</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Carry-select-adder"><a href="#Carry-select-adder" class="headerlink" title="Carry-select adder"></a>Carry-select adder</h5><p><strong>Module cseladd</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">wire</span> cout0;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] cout1, cout2;<br>    add16 add0 (a[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], b[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], <span class="hljs-number">1&#x27;b0</span>, sum[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], cout0);<br>    add16 add1 (a[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], b[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], <span class="hljs-number">1&#x27;b0</span>, cout1[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]);<br>    add16 add2 (a[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], b[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], <span class="hljs-number">1&#x27;b1</span>, cout2[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]);<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(cout0)<br>            <span class="hljs-number">1&#x27;b0</span> : sum[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>] &lt;= cout1[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>];<br>            <span class="hljs-number">2&#x27;b1</span> : sum[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>] &lt;= cout2[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Adder-subtractor"><a href="#Adder-subtractor" class="headerlink" title="Adder-subtractor"></a>Adder-subtractor</h5><p><strong>Module addsub</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">input</span> sub,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">wire</span> cout;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] aout;<br>    <span class="hljs-keyword">assign</span> aout = b ^ &#123;<span class="hljs-number">32</span>&#123;sub&#125;&#125;;<br>    add16 add0 (a[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], aout[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], sub, sum[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>], cout);<br>    add16 add1 (a[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], aout[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>], cout, sum[<span class="hljs-number">31</span>:<span class="hljs-number">16</span>]);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Procedures"><a href="#Procedures" class="headerlink" title="Procedures"></a>Procedures</h4><h5 id="Always-blocks-combinational"><a href="#Always-blocks-combinational" class="headerlink" title="Always blocks (combinational)"></a>Always blocks (combinational)</h5><p><strong>Alwaysblock1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> a, <br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> out_assign,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> out_alwaysblock<br>);<br><span class="hljs-keyword">assign</span> out_assign = a &amp; b;<br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        out_alwaysblock &lt;= a &amp; b;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Always-blocks-clocked"><a href="#Always-blocks-clocked" class="headerlink" title="Always blocks (clocked)"></a>Always blocks (clocked)</h5><p><strong>Alwaysblock2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> out_assign,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> out_always_comb,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> out_always_ff   );<br><br>    <span class="hljs-keyword">assign</span> out_assign = a ^ b;<br>    <br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        out_always_comb &lt;= a ^ b;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        out_always_ff &lt;= a ^ b;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="If-statement"><a href="#If-statement" class="headerlink" title="If statement"></a>If statement</h5><p><strong>Always if</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> sel_b1,<br>    <span class="hljs-keyword">input</span> sel_b2,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> out_assign,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> out_always   ); <br><br>    <span class="hljs-keyword">assign</span> out_assign = (sel_b1 &amp; sel_b2) ? b : a;<br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (sel_b1 &amp; sel_b2) <span class="hljs-keyword">begin</span><br>            out_always = b;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            out_always = a;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="If-statement-latches"><a href="#If-statement-latches" class="headerlink" title="If statement latches"></a>If statement latches</h5><p><strong>Always if2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span>      cpu_overheated,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> shut_off_computer,<br>    <span class="hljs-keyword">input</span>      arrived,<br>    <span class="hljs-keyword">input</span>      gas_tank_empty,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> keep_driving  ); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (cpu_overheated)<br>           shut_off_computer = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>           shut_off_computer = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (arrived | gas_tank_empty)<br>            keep_driving = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            keep_driving = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Case-statement"><a href="#Case-statement" class="headerlink" title="Case statement"></a>Case statement</h5><p><strong>Always case</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] sel, <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data0,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data1,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data2,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data3,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data4,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data5,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] out   );<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">always</span>@(*) <span class="hljs-keyword">begin</span>  <span class="hljs-comment">// This is a combinational circuit</span><br>        <span class="hljs-keyword">case</span>(sel)<br>            <span class="hljs-number">3&#x27;b000</span> : out = data0;<br>            <span class="hljs-number">3&#x27;b001</span> : out = data1;<br>            <span class="hljs-number">3&#x27;b010</span> : out = data2;<br>            <span class="hljs-number">3&#x27;b011</span> : out = data3;<br>            <span class="hljs-number">3&#x27;b100</span> : out = data4;<br>            <span class="hljs-number">3&#x27;b101</span> : out = data5;<br>            <span class="hljs-keyword">default</span> : out = <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Priority-encoder"><a href="#Priority-encoder" class="headerlink" title="Priority encoder"></a>Priority encoder</h5><p><strong>Always case2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] pos  );<br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(in)<br>            <span class="hljs-number">4&#x27;b0001</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;b0010</span> : pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <span class="hljs-number">4&#x27;b0011</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;b0100</span> : pos = <span class="hljs-number">2&#x27;d2</span>;<br>            <span class="hljs-number">4&#x27;b0101</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;b0110</span> : pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <span class="hljs-number">4&#x27;b0111</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;b1000</span> : pos = <span class="hljs-number">2&#x27;d3</span>;<br>            <span class="hljs-number">4&#x27;b1001</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;b1010</span> : pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <span class="hljs-number">4&#x27;b1011</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;b1100</span> : pos = <span class="hljs-number">2&#x27;d2</span>;<br>            <span class="hljs-number">4&#x27;b1101</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-number">4&#x27;b1110</span> : pos = <span class="hljs-number">2&#x27;d1</span>;<br>            <span class="hljs-number">4&#x27;b1111</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>            <span class="hljs-keyword">default</span> : pos = <span class="hljs-number">2&#x27;d0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Priority-encoder-with-casez"><a href="#Priority-encoder-with-casez" class="headerlink" title="Priority encoder with casez"></a>Priority encoder with casez</h5><p><strong>Always casez</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] pos  );<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">casez</span> (in)<br>            <span class="hljs-number">8&#x27;bzzzzzzz1</span> : pos = <span class="hljs-number">3&#x27;h0</span>;<br>            <span class="hljs-number">8&#x27;bzzzzzz10</span> : pos = <span class="hljs-number">3&#x27;h1</span>;<br>            <span class="hljs-number">8&#x27;bzzzzz100</span> : pos = <span class="hljs-number">3&#x27;h2</span>;<br>            <span class="hljs-number">8&#x27;bzzzz1000</span> : pos = <span class="hljs-number">3&#x27;h3</span>;<br>            <span class="hljs-number">8&#x27;bzzz10000</span> : pos = <span class="hljs-number">3&#x27;h4</span>;<br>            <span class="hljs-number">8&#x27;bzz100000</span> : pos = <span class="hljs-number">3&#x27;h5</span>;<br>            <span class="hljs-number">8&#x27;bz1000000</span> : pos = <span class="hljs-number">3&#x27;h6</span>;<br>            <span class="hljs-number">8&#x27;b10000000</span> : pos = <span class="hljs-number">3&#x27;h7</span>;<br>            <span class="hljs-keyword">default</span> : pos = <span class="hljs-number">3&#x27;h0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Avoiding-latches"><a href="#Avoiding-latches" class="headerlink" title="Avoiding latches"></a>Avoiding latches</h5><p><strong>Always nolatches</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] scancode,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> left,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> down,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> right,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> up  ); <br>    <br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <br>        <span class="hljs-keyword">case</span>(scancode)<br>            <span class="hljs-number">16&#x27;he06b</span> : <span class="hljs-keyword">begin</span> up = <span class="hljs-number">1&#x27;b0</span>; down = <span class="hljs-number">1&#x27;b0</span>; left = <span class="hljs-number">1&#x27;b1</span>; right = <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-keyword">end</span><br>            <span class="hljs-number">16&#x27;he072</span> : <span class="hljs-keyword">begin</span> up = <span class="hljs-number">1&#x27;b0</span>; down = <span class="hljs-number">1&#x27;b1</span>; left = <span class="hljs-number">1&#x27;b0</span>; right = <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-keyword">end</span><br>            <span class="hljs-number">16&#x27;he074</span> : <span class="hljs-keyword">begin</span> up = <span class="hljs-number">1&#x27;b0</span>; down = <span class="hljs-number">1&#x27;b0</span>; left = <span class="hljs-number">1&#x27;b0</span>; right = <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-keyword">end</span><br>            <span class="hljs-number">16&#x27;he075</span> : <span class="hljs-keyword">begin</span> up = <span class="hljs-number">1&#x27;b1</span>; down = <span class="hljs-number">1&#x27;b0</span>; left = <span class="hljs-number">1&#x27;b0</span>; right = <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">default</span>  : <span class="hljs-keyword">begin</span> up = <span class="hljs-number">1&#x27;b0</span>; down = <span class="hljs-number">1&#x27;b0</span>; left = <span class="hljs-number">1&#x27;b0</span>; right = <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="More-Verilog-Features"><a href="#More-Verilog-Features" class="headerlink" title="More Verilog Features"></a>More Verilog Features</h4><h5 id="Conditional-ternary-operator"><a href="#Conditional-ternary-operator" class="headerlink" title="Conditional ternary operator"></a>Conditional ternary operator</h5><p><strong>Conditional</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a, b, c, d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] min);<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] intermediate_result1, intermediate_result2;<br>    <span class="hljs-keyword">assign</span> intermediate_result1 = a &lt; b ? a : b;<br>    <span class="hljs-keyword">assign</span> intermediate_result2 = c &lt; d ? c : d;<br>    <span class="hljs-keyword">assign</span> min = intermediate_result1 &lt; intermediate_result2 ? intermediate_result1 :  <br>                 intermediate_result2;<br>    <span class="hljs-comment">// assign intermediate_result1 = compare? true: false;</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Reduction-operators"><a href="#Reduction-operators" class="headerlink" title="Reduction operators"></a>Reduction operators</h5><p><strong>Reduction</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> parity); <br><span class="hljs-keyword">assign</span> parity = ^in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Reduction-Even-wider-gates"><a href="#Reduction-Even-wider-gates" class="headerlink" title="Reduction: Even wider gates"></a>Reduction: Even wider gates</h5><p><strong>Gates100</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> out_and,<br>    <span class="hljs-keyword">output</span> out_or,<br>    <span class="hljs-keyword">output</span> out_xor <br>);<br><span class="hljs-keyword">assign</span> out_and = &amp;in;<br>    <span class="hljs-keyword">assign</span> out_or = |in;<br>    <span class="hljs-keyword">assign</span> out_xor = ^in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combinational-for-loop-Vector-reversal-2"><a href="#Combinational-for-loop-Vector-reversal-2" class="headerlink" title="Combinational for-loop: Vector reversal 2"></a>Combinational for-loop: Vector reversal 2</h5><p><strong>Vector100r</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] out<br>);<br>    <span class="hljs-keyword">integer</span> i;<br>    <br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">99</span>; i &gt;= <span class="hljs-number">0</span>; i = i - <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            out[<span class="hljs-number">99</span>-i] = in[i];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combinational-for-loop-255-bit-population-count"><a href="#Combinational-for-loop-255-bit-population-count" class="headerlink" title="Combinational for-loop: 255-bit population count"></a>Combinational for-loop: 255-bit population count</h5><p><strong>Popcount255</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">254</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out );<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        out = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">$bits</span>(in); i++) <span class="hljs-keyword">begin</span><br>            out = out + in[i];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Generate-for-loop-100-bit-binary-adder-2"><a href="#Generate-for-loop-100-bit-binary-adder-2" class="headerlink" title="Generate for-loop: 100-bit binary adder 2"></a>Generate for-loop: 100-bit binary adder 2</h5><p><strong>Adder100i</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] a, b,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] cout,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] sum );<br>    <br>    <span class="hljs-keyword">assign</span> &#123;cout[<span class="hljs-number">0</span>], sum[<span class="hljs-number">0</span>]&#125; = a[<span class="hljs-number">0</span>] + b[<span class="hljs-number">0</span>] + cin;<br>    <span class="hljs-keyword">genvar</span> i;<br>    <span class="hljs-keyword">generate</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span> ; i++) <span class="hljs-keyword">begin</span> : top_module<br>            fadder100 fadder0 (<span class="hljs-variable">.A</span>(a[i]), <span class="hljs-variable">.B</span>(b[i]), <span class="hljs-variable">.fcin</span>(cout[i - <span class="hljs-number">1</span>]), <span class="hljs-variable">.Cout</span>(cout[i]),<br>                               <span class="hljs-variable">.Sum</span>(sum[i]));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endgenerate</span><br><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> fadder100 (<span class="hljs-keyword">input</span> A, B,<br>                  <span class="hljs-keyword">input</span> fcin,<br>                  <span class="hljs-keyword">output</span> Cout, Sum);<br>    <span class="hljs-keyword">assign</span> &#123;Cout, Sum&#125; = A + B + fcin;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Generate-for-loop-100-digit-BCD-adder"><a href="#Generate-for-loop-100-digit-BCD-adder" class="headerlink" title="Generate for-loop: 100-digit BCD adder"></a>Generate for-loop: 100-digit BCD adder</h5><p><strong>Bcdadd100</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">399</span>:<span class="hljs-number">0</span>] a, b,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> cout,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">399</span>:<span class="hljs-number">0</span>] sum );<br><br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">399</span>:<span class="hljs-number">0</span>] out;<br>    <br>    bcd_fadd bcdd (<span class="hljs-variable">.a</span>(a[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]), <span class="hljs-variable">.b</span>(b[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]), <span class="hljs-variable">.cin</span>(cin), <span class="hljs-variable">.cout</span>(out[<span class="hljs-number">0</span>]), <span class="hljs-variable">.sum</span>(sum[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]));<br>    <span class="hljs-keyword">assign</span> cout = out[<span class="hljs-number">396</span>];<br>    <br>    <span class="hljs-keyword">generate</span><br>        <span class="hljs-keyword">genvar</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">4</span>; i &lt; <span class="hljs-number">400</span>; i+=<span class="hljs-number">4</span>) <span class="hljs-keyword">begin</span> : bcdadd99<br>            bcd_fadd bcdd (a[(i + <span class="hljs-number">3</span>):(i)], b[(i + <span class="hljs-number">3</span>):(i)], out[i - <span class="hljs-number">4</span>], out[i], sum[(i+<span class="hljs-number">3</span>):(i)]);<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endgenerate</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="Circuits"><a href="#Circuits" class="headerlink" title="Circuits"></a>Circuits</h2><h3 id="Combinational-Logic"><a href="#Combinational-Logic" class="headerlink" title="Combinational Logic"></a>Combinational Logic</h3><h4 id="Basic-Gates"><a href="#Basic-Gates" class="headerlink" title="Basic Gates"></a>Basic Gates</h4><h5 id="Wire"><a href="#Wire" class="headerlink" title="Wire"></a>Wire</h5><p><strong>Exams&#x2F;m2014 q4h</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">output</span> out);<br><span class="hljs-keyword">assign</span> out = in;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="GND"><a href="#GND" class="headerlink" title="GND"></a>GND</h5><p><strong>Exams&#x2F;m2014_q4i</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">output</span> out);<br><span class="hljs-keyword">assign</span> out = <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="NOR"><a href="#NOR" class="headerlink" title="NOR"></a>NOR</h5><p><strong>Exams&#x2F;m2014 q4e</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> in1,<br>    <span class="hljs-keyword">input</span> in2,<br>    <span class="hljs-keyword">output</span> out);<br>    <span class="hljs-keyword">assign</span> out = ~ (in1 | in2);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Another-gate"><a href="#Another-gate" class="headerlink" title="Another gate"></a>Another gate</h5><p><strong>Exams&#x2F;m2014 q4f</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> in1,<br>    <span class="hljs-keyword">input</span> in2,<br>    <span class="hljs-keyword">output</span> out);<br>    <span class="hljs-keyword">assign</span> out = in1 &amp; (~ in2);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Two-gates"><a href="#Two-gates" class="headerlink" title="Two gates"></a>Two gates</h5><p><strong>Exams&#x2F;m2014 q4g</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> in1,<br>    <span class="hljs-keyword">input</span> in2,<br>    <span class="hljs-keyword">input</span> in3,<br>    <span class="hljs-keyword">output</span> out);<br><br>    <span class="hljs-keyword">wire</span> temp;<br>    <span class="hljs-keyword">assign</span> temp = ~ (in1 ^ in2);<br>    <span class="hljs-keyword">assign</span> out = temp ^ in3;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="More-logic-gates"><a href="#More-logic-gates" class="headerlink" title="More logic gates"></a>More logic gates</h5><p><strong>Gates</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a, b,<br>    <span class="hljs-keyword">output</span> out_and,<br>    <span class="hljs-keyword">output</span> out_or,<br>    <span class="hljs-keyword">output</span> out_xor,<br>    <span class="hljs-keyword">output</span> out_nand,<br>    <span class="hljs-keyword">output</span> out_nor,<br>    <span class="hljs-keyword">output</span> out_xnor,<br>    <span class="hljs-keyword">output</span> out_anotb<br>);<br><span class="hljs-keyword">assign</span> out_and = a &amp; b;<br>    <span class="hljs-keyword">assign</span> out_or = a | b;<br>    <span class="hljs-keyword">assign</span> out_xor = a ^ b;<br>    <span class="hljs-keyword">assign</span> out_nand = ~ (a &amp; b);<br>    <span class="hljs-keyword">assign</span> out_nor = (~ a) &amp; (~ b);<br>    <span class="hljs-keyword">assign</span> out_xnor = ~ (a ^ b);<br>    <span class="hljs-keyword">assign</span> out_anotb = a &amp; (~b);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="7420-chip"><a href="#7420-chip" class="headerlink" title="7420 chip"></a>7420 chip</h5><p><strong>7420</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> p1a, p1b, p1c, p1d,<br>    <span class="hljs-keyword">output</span> p1y,<br>    <span class="hljs-keyword">input</span> p2a, p2b, p2c, p2d,<br>    <span class="hljs-keyword">output</span> p2y );<br>    <br>    <span class="hljs-keyword">assign</span> p1y = ~ (p1a &amp; p1b &amp; p1c &amp; p1d);<br>    <span class="hljs-keyword">assign</span> p2y = ~ (p2a &amp; p2b &amp; p2c &amp; p2d);<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Truth-tables"><a href="#Truth-tables" class="headerlink" title="Truth tables"></a>Truth tables</h5><p><strong>Truthtable1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> x3,<br>    <span class="hljs-keyword">input</span> x2,<br>    <span class="hljs-keyword">input</span> x1,  <span class="hljs-comment">// three inputs</span><br>    <span class="hljs-keyword">output</span> f   <span class="hljs-comment">// one output</span><br>);<br>    <span class="hljs-keyword">assign</span> f = (~ x3 &amp; x2) | (x3 &amp; x1);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Two-bit-equality"><a href="#Two-bit-equality" class="headerlink" title="Two-bit equality"></a>Two-bit equality</h5><p><strong>Mt2015 eq2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] A, <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] B, <span class="hljs-keyword">output</span> z ); <br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (A **= B)<br>            z = <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">else</span><br>            z = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-circuit-A"><a href="#Simple-circuit-A" class="headerlink" title="Simple circuit A"></a>Simple circuit A</h5><p><strong>Mt2015 q4a</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<span class="hljs-keyword">input</span> x, <span class="hljs-keyword">input</span> y, <span class="hljs-keyword">output</span> z);<br>    A mod_a (x, y, z);<br><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> A (<span class="hljs-keyword">input</span> X, <span class="hljs-keyword">input</span> Y, <span class="hljs-keyword">output</span> Z);<br>    <span class="hljs-keyword">assign</span> Z = (X ^ Y) &amp; X;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-circuit-B"><a href="#Simple-circuit-B" class="headerlink" title="Simple circuit B"></a>Simple circuit B</h5><p><strong>Mt2015 q4b</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <span class="hljs-keyword">input</span> x, <span class="hljs-keyword">input</span> y, <span class="hljs-keyword">output</span> z );<br>    <span class="hljs-keyword">assign</span> z = ~(x ^ y);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combine-circuits-A-and-B"><a href="#Combine-circuits-A-and-B" class="headerlink" title="Combine circuits A and B"></a>Combine circuits A and B</h5><p><strong>Mt2015 q4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<span class="hljs-keyword">input</span> x, <span class="hljs-keyword">input</span> y, <span class="hljs-keyword">output</span> z);<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] z_out;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] temp;<br>    A mod_a0 (x, y, z_out[<span class="hljs-number">0</span>]);<br>    A mod_a1 (x, y, z_out[<span class="hljs-number">2</span>]);<br>    B mod_b0 (x, y, z_out[<span class="hljs-number">1</span>]);<br>    B mod_b1 (x, y, z_out[<span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">assign</span> temp[<span class="hljs-number">0</span>] = z_out[<span class="hljs-number">0</span>] | z_out[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">assign</span> temp[<span class="hljs-number">1</span>] = z_out[<span class="hljs-number">2</span>] &amp; z_out[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">assign</span> z = temp[<span class="hljs-number">0</span>] ^ temp[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> A (<span class="hljs-keyword">input</span> a_x, <span class="hljs-keyword">input</span> a_y, <span class="hljs-keyword">output</span> a_z);<br>    <span class="hljs-keyword">assign</span> a_z = (a_x ^ a_y) &amp; a_x;<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> B (<span class="hljs-keyword">input</span> b_x, <span class="hljs-keyword">input</span> b_y, <span class="hljs-keyword">output</span> b_z);<br>    <span class="hljs-keyword">assign</span> b_z = ~(b_x ^ b_y);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Ring-or-vibrate"><a href="#Ring-or-vibrate" class="headerlink" title="Ring or vibrate?"></a>Ring or vibrate?</h5><p><strong>Ringer</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> ring,<br>    <span class="hljs-keyword">input</span> vibrate_mode,<br>    <span class="hljs-keyword">output</span> ringer,       <span class="hljs-comment">// Make sound</span><br>    <span class="hljs-keyword">output</span> motor         <span class="hljs-comment">// Vibrate</span><br>);<br><span class="hljs-keyword">assign</span> motor = ring &amp; vibrate_mode;<br>    <span class="hljs-keyword">assign</span> ringer = ring &amp; (~ vibrate_mode);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Thermostat"><a href="#Thermostat" class="headerlink" title="Thermostat"></a>Thermostat</h5><p><strong>Thermostat</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> too_cold,<br>    <span class="hljs-keyword">input</span> too_hot,<br>    <span class="hljs-keyword">input</span> mode,<br>    <span class="hljs-keyword">input</span> fan_on,<br>    <span class="hljs-keyword">output</span> heater,<br>    <span class="hljs-keyword">output</span> aircon,<br>    <span class="hljs-keyword">output</span> fan<br>); <br><span class="hljs-keyword">assign</span> heater = too_cold &amp; mode;<br>    <span class="hljs-keyword">assign</span> aircon = too_hot &amp; !mode;<br>    <span class="hljs-keyword">assign</span> fan = heater | aircon | fan_on;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="3-bit-population-count"><a href="#3-bit-population-count" class="headerlink" title="3-bit population count"></a>3-bit population count</h5><p><strong>Popcount3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] out );<br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        out = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) <span class="hljs-keyword">begin</span><br>            out = out + in[i];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Gates-and-vectors"><a href="#Gates-and-vectors" class="headerlink" title="Gates and vectors"></a>Gates and vectors</h5><p><strong>Gatesv</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] out_both,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">1</span>] out_any,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] out_different );<br>    <span class="hljs-keyword">assign</span> out_both = &#123;in[<span class="hljs-number">3</span>] &amp; in[<span class="hljs-number">2</span>], in[<span class="hljs-number">2</span>] &amp; in[<span class="hljs-number">1</span>], in[<span class="hljs-number">1</span>] &amp; in[<span class="hljs-number">0</span>]&#125;;<br>    <span class="hljs-keyword">assign</span> out_any = &#123;in[<span class="hljs-number">3</span>] | in[<span class="hljs-number">2</span>], in[<span class="hljs-number">2</span>] | in[<span class="hljs-number">1</span>], in[<span class="hljs-number">1</span>] | in[<span class="hljs-number">0</span>]&#125;;<br>    <span class="hljs-keyword">assign</span> out_different = &#123;in[<span class="hljs-number">3</span>] ^ in[<span class="hljs-number">0</span>], in[<span class="hljs-number">2</span>] ^ in[<span class="hljs-number">3</span>], in[<span class="hljs-number">1</span>] ^ in[<span class="hljs-number">2</span>], in[<span class="hljs-number">0</span>] ^ in[<span class="hljs-number">1</span>]&#125;;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Even-longer-vectors"><a href="#Even-longer-vectors" class="headerlink" title="Even longer vectors"></a>Even longer vectors</h5><p><strong>Gatesv100</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">98</span>:<span class="hljs-number">0</span>] out_both,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">1</span>] out_any,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] out_different );<br><br>    <span class="hljs-keyword">assign</span> out_both = in[<span class="hljs-number">98</span>:<span class="hljs-number">0</span>] &amp; in[<span class="hljs-number">99</span>:<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">assign</span> out_any = in[<span class="hljs-number">99</span>:<span class="hljs-number">1</span>] | in[<span class="hljs-number">98</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">assign</span> out_different = in ^ &#123;in[<span class="hljs-number">0</span>], in[<span class="hljs-number">99</span>:<span class="hljs-number">1</span>]&#125;;<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Multiplexers"><a href="#Multiplexers" class="headerlink" title="Multiplexers"></a>Multiplexers</h4><h5 id="2-to-1-multiplexer"><a href="#2-to-1-multiplexer" class="headerlink" title="2-to-1 multiplexer"></a>2-to-1 multiplexer</h5><p><strong>Mux2to1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a, b, sel,<br>    <span class="hljs-keyword">output</span> out ); <br>    <span class="hljs-keyword">assign</span> out = sel != <span class="hljs-number">0</span> ? b : a;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="2-to-1-bus-multiplexer"><a href="#2-to-1-bus-multiplexer" class="headerlink" title="2-to-1 bus multiplexer"></a>2-to-1 bus multiplexer</h5><p><strong>Mux2to1v</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] a, b,<br>    <span class="hljs-keyword">input</span> sel,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] out );<br><span class="hljs-keyword">assign</span> out = sel != <span class="hljs-number">0</span> ? b : a;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="9-to-1-multiplexer"><a href="#9-to-1-multiplexer" class="headerlink" title="9-to-1 multiplexer"></a>9-to-1 multiplexer</h5><p><strong>Mux9to1v</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] a, b, c, d, e, f, g, h, i,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] sel,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] out );<br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(sel)<br>            <span class="hljs-number">4&#x27;b0000</span>: out = a;<br>            <span class="hljs-number">4&#x27;b0001</span>: out = b;<br>            <span class="hljs-number">4&#x27;b0010</span>: out = c;<br>            <span class="hljs-number">4&#x27;b0011</span>: out = d;<br>            <span class="hljs-number">4&#x27;b0100</span>: out = e;<br>            <span class="hljs-number">4&#x27;b0101</span>: out = f;<br>            <span class="hljs-number">4&#x27;b0110</span>: out = g;<br>            <span class="hljs-number">4&#x27;b0111</span>: out = h;<br>            <span class="hljs-number">4&#x27;b1000</span>: out = i;<br>            <span class="hljs-keyword">default</span> : out[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] = <span class="hljs-number">16&#x27;hffff</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="256-to-1-multiplexer"><a href="#256-to-1-multiplexer" class="headerlink" title="256-to-1 multiplexer"></a>256-to-1 multiplexer</h5><p><strong>Mux256to1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] sel,<br>    <span class="hljs-keyword">output</span> out );<br>    <span class="hljs-keyword">assign</span> out = in[sel];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="256-to-1-4bit-multiplexer"><a href="#256-to-1-4bit-multiplexer" class="headerlink" title="256-to-1 4bit multiplexer"></a>256-to-1 4bit multiplexer</h5><p><strong>Mux256to1v</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1023</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] sel,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] out );<br>    <span class="hljs-keyword">assign</span> out = &#123;in[sel * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>], in[sel * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>], in[sel * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>], in[sel * <span class="hljs-number">4</span>]&#125;;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Arithmetic-Circuits"><a href="#Arithmetic-Circuits" class="headerlink" title="Arithmetic Circuits"></a>Arithmetic Circuits</h4><h5 id="Half-adder"><a href="#Half-adder" class="headerlink" title="Half adder"></a>Half adder</h5><p><strong>Hadd</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a, b,<br>    <span class="hljs-keyword">output</span> cout, sum );<br><span class="hljs-keyword">assign</span> sum = a ^ b;<br>    <span class="hljs-keyword">assign</span> cout = a &amp; b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Full-adder"><a href="#Full-adder" class="headerlink" title="Full adder"></a>Full adder</h5><p><strong>Fadd</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> a, b, cin,<br>    <span class="hljs-keyword">output</span> cout, sum );<br>    <span class="hljs-keyword">assign</span> cout = a &amp; b + (a &amp; cin) ^ (b &amp; cin);<br>    <span class="hljs-keyword">assign</span> sum = a ^ b ^ cin;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="3-bit-binary-adder"><a href="#3-bit-binary-adder" class="headerlink" title="3-bit binary adder"></a>3-bit binary adder</h5><p><strong>Adder3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] a, b,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] cout,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] sum );<br>    fadd fadd0 (a[<span class="hljs-number">0</span>], b[<span class="hljs-number">0</span>], cin, cout[<span class="hljs-number">0</span>], sum[<span class="hljs-number">0</span>]);<br>    fadd fadd1 (a[<span class="hljs-number">1</span>], b[<span class="hljs-number">1</span>], cout[<span class="hljs-number">0</span>], cout[<span class="hljs-number">1</span>], sum[<span class="hljs-number">1</span>]);<br>    fadd fadd2 (a[<span class="hljs-number">2</span>], b[<span class="hljs-number">2</span>], cout[<span class="hljs-number">1</span>], cout[<span class="hljs-number">2</span>], sum[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> fadd (<br><span class="hljs-keyword">input</span> a, b, cin,<br><span class="hljs-keyword">output</span> cout, sum);<br>    <span class="hljs-keyword">assign</span> cout = a &amp; b + (a &amp; cin) ^ (b &amp; cin);<br>    <span class="hljs-keyword">assign</span> sum = a ^ b ^ cin;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Adder"><a href="#Adder" class="headerlink" title="Adder"></a>Adder</h5><p><strong>Exams&#x2F;m2014 q4j</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] x,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] y, <br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] sum);<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] cout;<br>    fadd fadd0 (x[<span class="hljs-number">0</span>], y[<span class="hljs-number">0</span>], <span class="hljs-number">1&#x27;b0</span>, cout[<span class="hljs-number">0</span>], sum[<span class="hljs-number">0</span>]);<br>    fadd fadd1 (x[<span class="hljs-number">1</span>], y[<span class="hljs-number">1</span>], cout[<span class="hljs-number">0</span>], cout[<span class="hljs-number">1</span>], sum[<span class="hljs-number">1</span>]);<br>    fadd fadd2 (x[<span class="hljs-number">2</span>], y[<span class="hljs-number">2</span>], cout[<span class="hljs-number">1</span>], cout[<span class="hljs-number">2</span>], sum[<span class="hljs-number">2</span>]);<br>    fadd fadd3 (x[<span class="hljs-number">3</span>], y[<span class="hljs-number">3</span>], cout[<span class="hljs-number">2</span>], cout[<span class="hljs-number">3</span>], sum[<span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">assign</span> sum[<span class="hljs-number">4</span>] = cout[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> fadd( <br>    <span class="hljs-keyword">input</span> a, b, cin,<br>    <span class="hljs-keyword">output</span> cout, sum );<br>    <span class="hljs-keyword">assign</span> cout = a &amp; b + (a &amp; cin) ^ (b &amp; cin);<br>    <span class="hljs-keyword">assign</span> sum = a ^ b ^ cin;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Signed-addition-overflow"><a href="#Signed-addition-overflow" class="headerlink" title="Signed addition overflow"></a>Signed addition overflow</h5><p><strong>Exams&#x2F;ece241 2014 q1c</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] s,<br>    <span class="hljs-keyword">output</span> overflow<br>);<br> <br>    <span class="hljs-keyword">assign</span> s = a + b;<br>    <span class="hljs-keyword">assign</span> overflow = (a[<span class="hljs-number">7</span>] &amp;&amp; b[<span class="hljs-number">7</span>] &amp;&amp; ~s[<span class="hljs-number">7</span>]) || (~a[<span class="hljs-number">7</span>] &amp;&amp; ~b[<span class="hljs-number">7</span>] &amp;&amp; s[<span class="hljs-number">7</span>]);<br>    <span class="hljs-comment">// assign s = ...</span><br>    <span class="hljs-comment">// assign overflow = ...</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="100-bit-binary-adder"><a href="#100-bit-binary-adder" class="headerlink" title="100-bit binary adder"></a>100-bit binary adder</h5><p><strong>Adder100</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] a, b,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> cout,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] sum );<br>    <span class="hljs-keyword">assign</span> &#123;cout, sum&#125; = a + b + cin;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="4-digit-BCD-adder"><a href="#4-digit-BCD-adder" class="headerlink" title="4-digit BCD adder"></a>4-digit BCD adder</h5><p><strong>Bcdadd4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] a, b,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> cout,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] sum );<br><br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] temp;<br>    bcd_fadd bcdd0 (a[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>], b[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>], cin, temp[<span class="hljs-number">0</span>], sum[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]);<br>    bcd_fadd bcdd1 (a[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>], b[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>], temp[<span class="hljs-number">0</span>], temp[<span class="hljs-number">1</span>], sum[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]);<br>    bcd_fadd bcdd2 (a[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>], b[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>], temp[<span class="hljs-number">1</span>], temp[<span class="hljs-number">2</span>], sum[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]);<br>    bcd_fadd bcdd3 (a[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>], b[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>], temp[<span class="hljs-number">2</span>], temp[<span class="hljs-number">3</span>], sum[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]);<br>    <span class="hljs-keyword">assign</span> cout = temp[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Karnaugh-Map-to-Circuit"><a href="#Karnaugh-Map-to-Circuit" class="headerlink" title="Karnaugh Map to Circuit"></a>Karnaugh Map to Circuit</h4><h5 id="3-variable"><a href="#3-variable" class="headerlink" title="3-variable"></a>3-variable</h5><p><strong>Kmap1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">output</span> out  ); <br>    <span class="hljs-keyword">assign</span> out = (b | c) || a &amp; ~b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="4-variable"><a href="#4-variable" class="headerlink" title="4-variable"></a>4-variable</h5><p><strong>Kmap2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out  ); <br><span class="hljs-keyword">assign</span> out = a &amp; c &amp; d || ~a &amp; b &amp; c || ~ a &amp; ~d || ~ b &amp; ~ c;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="4-variable-1"><a href="#4-variable-1" class="headerlink" title="4-variable"></a>4-variable</h5><p><strong>Kmap3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out  ); <br>    <span class="hljs-keyword">assign</span> out = a | ((~ b) &amp; c);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="4-variable-2"><a href="#4-variable-2" class="headerlink" title="4-variable"></a>4-variable</h5><p><strong>Kmap4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out  ); <br><span class="hljs-keyword">assign</span> out = a ^ b ^ c ^ d;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Minimum-SOP-and-POS"><a href="#Minimum-SOP-and-POS" class="headerlink" title="Minimum SOP and POS"></a>Minimum SOP and POS</h5><p><strong>Exams&#x2F;ece241 2013 q2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> out_sop,<br>    <span class="hljs-keyword">output</span> out_pos<br>); <br>    <span class="hljs-keyword">assign</span> out_sop = (c &amp; d) | (~a &amp; ~b &amp; c);<br>    <span class="hljs-keyword">assign</span> out_pos = (~a &amp; ~b &amp; c) | (~a &amp; c &amp; d) | (b &amp; c &amp; d);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Karnaugh-map"><a href="#Karnaugh-map" class="headerlink" title="Karnaugh map"></a>Karnaugh map</h5><p><strong>Exams&#x2F;m2014 q3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">1</span>] x, <br>    <span class="hljs-keyword">output</span> f );<br>    <span class="hljs-keyword">assign</span> f = ~x[<span class="hljs-number">1</span>] &amp; x[<span class="hljs-number">3</span>] | x[<span class="hljs-number">2</span>] &amp; x[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Karnaugh-map-1"><a href="#Karnaugh-map-1" class="headerlink" title="Karnaugh map"></a>Karnaugh map</h5><p><strong>Exams&#x2F;2012 q1g</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">1</span>] x,<br>    <span class="hljs-keyword">output</span> f<br>); <br>    <span class="hljs-keyword">assign</span> f = !x[<span class="hljs-number">1</span>] &amp; x[<span class="hljs-number">3</span>] | !x[<span class="hljs-number">2</span>] &amp; !x[<span class="hljs-number">4</span>] | x[<span class="hljs-number">2</span>] &amp; x[<span class="hljs-number">3</span>] &amp; x[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="K-map-implemented-with-a-multiplexer"><a href="#K-map-implemented-with-a-multiplexer" class="headerlink" title="K-map implemented with a multiplexer"></a>K-map implemented with a multiplexer</h5><p><strong>Exams&#x2F;ece241 2014 q3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] mux_in<br>); <br>    <span class="hljs-keyword">assign</span> mux_in[<span class="hljs-number">0</span>] = c ? <span class="hljs-number">1</span> : d;<br>    <span class="hljs-keyword">assign</span> mux_in[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">assign</span> mux_in[<span class="hljs-number">2</span>] = d ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">assign</span> mux_in[<span class="hljs-number">3</span>] = c ? d : <span class="hljs-number">0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="Sequential-Logic"><a href="#Sequential-Logic" class="headerlink" title="Sequential Logic"></a>Sequential Logic</h3><h4 id="Latches-and-Flip-Flops"><a href="#Latches-and-Flip-Flops" class="headerlink" title="Latches and Flip-Flops"></a>Latches and Flip-Flops</h4><h5 id="D-flip-flop"><a href="#D-flip-flop" class="headerlink" title="D flip-flop"></a>D flip-flop</h5><p><strong>Dff</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,    <span class="hljs-comment">// Clocks are used in sequential circuits</span><br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> q );<span class="hljs-comment">//</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>            q &lt;= d;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// Use a clocked always block</span><br>    <span class="hljs-comment">//   copy d to q at every positive edge of clk</span><br>    <span class="hljs-comment">//   Clocked always blocks should use non-blocking assignments</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="D-flip-flops"><a href="#D-flip-flops" class="headerlink" title="D flip-flops"></a>D flip-flops</h5><p><strong>Dff8</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] q<br>);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    q &lt;= d;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="DFF-with-reset"><a href="#DFF-with-reset" class="headerlink" title="DFF with reset"></a>DFF with reset</h5><p><strong>Dff8r</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,            <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] q<br>);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(reset)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= d;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="DFF-with-reset-value"><a href="#DFF-with-reset-value" class="headerlink" title="DFF with reset value"></a>DFF with reset value</h5><p><strong>Dff8p</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] q<br>);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">negedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(reset)<br>            q &lt;= <span class="hljs-number">8&#x27;h34</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= d;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="DFF-with-asynchronous-reset"><a href="#DFF-with-asynchronous-reset" class="headerlink" title="DFF with asynchronous reset"></a>DFF with asynchronous reset</h5><p><strong>Dff8ar</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,   <span class="hljs-comment">// active high asynchronous reset</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] q<br>);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= d;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="DFF-with-byte-enable"><a href="#DFF-with-byte-enable" class="headerlink" title="DFF with byte enable"></a>DFF with byte enable</h5><p><strong>Dff16e</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> resetn,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] byteena,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] q<br>);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (!resetn)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (byteena[<span class="hljs-number">1</span>])<br>                q[<span class="hljs-number">15</span>:<span class="hljs-number">8</span>] &lt;= d[<span class="hljs-number">15</span>:<span class="hljs-number">8</span>];<br>            <span class="hljs-keyword">if</span> (byteena[<span class="hljs-number">0</span>])<br>            q[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] &lt;= d[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="D-Latch"><a href="#D-Latch" class="headerlink" title="D Latch"></a>D Latch</h5><p><strong>Exams&#x2F;m2014 q4a</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> d, <br>    <span class="hljs-keyword">input</span> ena,<br>    <span class="hljs-keyword">output</span> q);<br>    <span class="hljs-keyword">always</span>@ (d <span class="hljs-keyword">or</span> ena) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ena)<br>            q &lt;= d;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="DFF"><a href="#DFF" class="headerlink" title="DFF"></a>DFF</h5><p><strong>Exams&#x2F;m2014 q4b</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> d, <br>    <span class="hljs-keyword">input</span> ar,   <span class="hljs-comment">// asynchronous reset</span><br>    <span class="hljs-keyword">output</span> q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> ar) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (ar)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= d;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span> <br></code></pre></td></tr></table></figure><h5 id="DFF-1"><a href="#DFF-1" class="headerlink" title="DFF"></a>DFF</h5><p><strong>Exams&#x2F;m2014 q4c</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> d, <br>    <span class="hljs-keyword">input</span> r,   <span class="hljs-comment">// synchronous reset</span><br>    <span class="hljs-keyword">output</span> q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (r)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= d;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="DFF-gate"><a href="#DFF-gate" class="headerlink" title="DFF+gate"></a>DFF+gate</h5><p><strong>Exams&#x2F;m2014 q4d</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> in, <br>    <span class="hljs-keyword">output</span> out);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        out &lt;= out ^ in;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Mux-and-DFF"><a href="#Mux-and-DFF" class="headerlink" title="Mux and DFF"></a>Mux and DFF</h5><p><strong>Mt2015 muxdff</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br><span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> L,<br><span class="hljs-keyword">input</span> r_in,<br><span class="hljs-keyword">input</span> q_in,<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> Q);<br>    <br>    <span class="hljs-keyword">wire</span> temp;<br>    <span class="hljs-keyword">assign</span> temp = L ? r_in : q_in;<br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    Q &lt;= temp;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Mux-and-DFF-1"><a href="#Mux-and-DFF-1" class="headerlink" title="Mux and DFF"></a>Mux and DFF</h5><p><strong>Exams&#x2F;2014 q4a</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> w, R, E, L,<br>    <span class="hljs-keyword">output</span> Q<br>);<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] temp;<br>    <span class="hljs-keyword">assign</span> temp[<span class="hljs-number">0</span>] = E ? w : Q;<br>    <span class="hljs-keyword">assign</span> temp[<span class="hljs-number">1</span>] = L ? R : temp[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        Q &lt;= temp[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="DFFs-and-gates"><a href="#DFFs-and-gates" class="headerlink" title="DFFs and gates"></a>DFFs and gates</h5><p><strong>Exams&#x2F;ece241 2014 q4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> x,<br>    <span class="hljs-keyword">output</span> z<br>); <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] q;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        q[<span class="hljs-number">0</span>] &lt;= x ^ q[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        q[<span class="hljs-number">1</span>] &lt;= x &amp; ~q[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        q[<span class="hljs-number">2</span>] &lt;= x | ~q[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> z = ~|q;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Create-circuit-from-truth-table"><a href="#Create-circuit-from-truth-table" class="headerlink" title="Create circuit from truth table"></a>Create circuit from truth table</h5><p><strong>Exams&#x2F;ece241 2013 q7</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> j,<br>    <span class="hljs-keyword">input</span> k,<br>    <span class="hljs-keyword">output</span> Q); <br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] temp;<br>    <span class="hljs-keyword">assign</span> temp = &#123;j, k&#125;;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(temp)<br>            <span class="hljs-number">2&#x27;b00</span>: Q &lt;= Q;<br>            <span class="hljs-number">2&#x27;b01</span>: Q &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-number">2&#x27;b10</span>: Q &lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-number">2&#x27;b11</span>: Q &lt;= ~Q;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Detect-an-edge"><a href="#Detect-an-edge" class="headerlink" title="Detect an edge"></a>Detect an edge</h5><p><strong>Edgedetect</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] pedge<br>);<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] inverse;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    inverse &lt;= in;<br>        pedge &lt;= in &amp; ~inverse;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Detect-both-edges"><a href="#Detect-both-edges" class="headerlink" title="Detect both edges"></a>Detect both edges</h5><p><strong>Edgedetect2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] anyedge<br>);<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] inverse;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>            inverse &lt;= in;<br>            anyedge &lt;= in ^ inverse;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Edge-capture-register"><a href="#Edge-capture-register" class="headerlink" title="Edge capture register"></a>Edge capture register</h5><p><strong>Edgecapture</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] out<br>);<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] in_reg;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        in_reg &lt;= in;<br>        <span class="hljs-keyword">if</span> (reset)<br>            out &lt;= <span class="hljs-number">32&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span><br>            out = ~in &amp; in_reg | out;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Dual-edge-triggered-flip-flop"><a href="#Dual-edge-triggered-flip-flop" class="headerlink" title="Dual-edge triggered flip-flop"></a>Dual-edge triggered flip-flop</h5><p><strong>Dualedge</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> q<br>);<br><span class="hljs-keyword">reg</span> q_0;<br>    <span class="hljs-keyword">reg</span> q_1;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    q_0 = d ^ q_1;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">negedge</span> clk) <span class="hljs-keyword">begin</span><br>        q_1 = d ^ q_0;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> q = q_0 ^ q_1;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Counters"><a href="#Counters" class="headerlink" title="Counters"></a>Counters</h4><h5 id="Four-bit-binary-counter"><a href="#Four-bit-binary-counter" class="headerlink" title="Four-bit binary counter"></a>Four-bit binary counter</h5><p><strong>Count15</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,      <span class="hljs-comment">// Synchronous active-high reset</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(reset)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= q + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Decade-counter"><a href="#Decade-counter" class="headerlink" title="Decade counter"></a>Decade counter</h5><p><strong>Count10</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,        <span class="hljs-comment">// Synchronous active-high reset</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= (q + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Decade-counter-again"><a href="#Decade-counter-again" class="headerlink" title="Decade counter again"></a>Decade counter again</h5><p><strong>Count1to10</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset || q == <span class="hljs-number">10</span>)<br>            q &lt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= q + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Slow-decade-counter"><a href="#Slow-decade-counter" class="headerlink" title="Slow decade counter"></a>Slow decade counter</h5><p><strong>Countslow</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> slowena,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            q &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (slowena)<br>            q &lt;= (q + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Counter-1-12"><a href="#Counter-1-12" class="headerlink" title="Counter 1-12"></a>Counter 1-12</h5><p><strong>Exams&#x2F;ece241 2014 q7a</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> enable,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Q,<br>    <span class="hljs-keyword">output</span> c_enable,<br>    <span class="hljs-keyword">output</span> c_load,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] c_d<br>);<br><span class="hljs-keyword">assign</span> c_enable = enable;<br>    <span class="hljs-keyword">assign</span> c_load = reset | ((Q == <span class="hljs-number">4&#x27;d12</span>) &amp;&amp; enable == <span class="hljs-number">1&#x27;b1</span>);<br>    <span class="hljs-keyword">assign</span> c_d = c_load ? <span class="hljs-number">4&#x27;b1</span> : <span class="hljs-number">4&#x27;b0</span>;<br>    count4 the_counter (clk, c_enable, c_load, c_d, Q);<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Counter-1000"><a href="#Counter-1000" class="headerlink" title="Counter 1000"></a>Counter 1000</h5><p><strong>Exams&#x2F;ece241 2014 q7b</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> OneHertz,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] c_enable<br>); <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] ones, tens, hundreds;<br>    <span class="hljs-keyword">assign</span> c_enable = &#123;ones == <span class="hljs-number">4&#x27;d9</span> &amp;&amp; tens == <span class="hljs-number">4&#x27;d9</span>, ones == <span class="hljs-number">4&#x27;d9</span>, <span class="hljs-number">1&#x27;b1</span>&#125;;<br>    <span class="hljs-keyword">assign</span> OneHertz = (ones == <span class="hljs-number">4&#x27;d9</span> &amp;&amp; tens == <span class="hljs-number">4&#x27;d9</span> &amp;&amp; hundreds == <span class="hljs-number">4&#x27;d9</span>);<br>    bcdcount counter0 (clk, reset, c_enable[<span class="hljs-number">0</span>], ones);<br>    bcdcount counter1 (clk, reset, c_enable[<span class="hljs-number">1</span>], tens);<br>    bcdcount counter2 (clk, reset, c_enable[<span class="hljs-number">2</span>], hundreds);<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="4-digit-decimal-counter"><a href="#4-digit-decimal-counter" class="headerlink" title="4-digit decimal counter"></a>4-digit decimal counter</h5><p><strong>Countbcd</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,   <span class="hljs-comment">// Synchronous active-high reset</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">1</span>] ena,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] q);<br>    <span class="hljs-keyword">assign</span> ena = &#123;q[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>] == <span class="hljs-number">4&#x27;d9</span> &amp;&amp; q[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>] == <span class="hljs-number">4&#x27;d9</span> &amp;&amp; q[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">4&#x27;d9</span>, q[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>] == <span class="hljs-number">4&#x27;d9</span> &amp;&amp; q[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">4&#x27;d9</span>, q[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">4&#x27;d9</span>&#125;;<br>    count_bcd cbcd0 (clk, reset, <span class="hljs-number">1&#x27;b1</span>, q[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]);<br>    count_bcd cbcd1 (clk, reset, ena[<span class="hljs-number">1</span>], q[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]);<br>    count_bcd cbcd2 (clk, reset, ena[<span class="hljs-number">2</span>], q[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]);<br>    count_bcd cbcd3 (clk, reset, ena[<span class="hljs-number">3</span>], q[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]);<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> count_bcd (<br>    <span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> reset,<br><span class="hljs-keyword">input</span> ena,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q);<br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            q &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ena) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (q == <span class="hljs-number">4&#x27;d9</span>)<br>                q &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            <span class="hljs-keyword">else</span><br>                q &lt;= q + <span class="hljs-number">4&#x27;d1</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="12-hour-clock"><a href="#12-hour-clock" class="headerlink" title="12-hour clock"></a>12-hour clock</h5><p><strong>Count clock</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> ena,<br>    <span class="hljs-keyword">output</span> pm,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] hh,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] mm,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] ss); <br>    count60 seconds (clk, reset, ena, ss);<br>    count60 minutes (clk, reset, ena &amp;&amp; (ss == <span class="hljs-number">8&#x27;h59</span>), mm);<br>    count12 hours (clk, reset, ena &amp;&amp; (ss == <span class="hljs-number">8&#x27;h59</span>) &amp;&amp; (mm == <span class="hljs-number">8&#x27;h59</span>), pm, hh);<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> count60(<br><span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> reset,<br><span class="hljs-keyword">input</span> ena,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] nn);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            nn &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ena)<br>            <span class="hljs-keyword">if</span> (nn == <span class="hljs-number">8&#x27;h59</span>)<br>                nn &lt;= <span class="hljs-number">8&#x27;d0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nn[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">4&#x27;d9</span>) <span class="hljs-keyword">begin</span><br>            nn[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>] &lt;= nn[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>] + <span class="hljs-number">4&#x27;d1</span>;<br>            nn[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span><br>            nn &lt;= nn + <span class="hljs-number">8&#x27;d1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> count12 (<br><span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> reset,<br><span class="hljs-keyword">input</span> ena,<br><span class="hljs-keyword">output</span> pm,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] nn);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>        nn &lt;= <span class="hljs-number">8&#x27;h12</span>;<br>            pm &lt;= <span class="hljs-number">1&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ena)<br>            <span class="hljs-keyword">if</span> (nn == <span class="hljs-number">8&#x27;h11</span>) <span class="hljs-keyword">begin</span><br>            nn &lt;= <span class="hljs-number">8&#x27;h12</span>;<br>                pm &lt;= ~pm;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nn == <span class="hljs-number">8&#x27;h12</span>)<br>                nn &lt;= <span class="hljs-number">8&#x27;h1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nn[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">4&#x27;d9</span>) <span class="hljs-keyword">begin</span><br>                nn[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>] &lt;= nn[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>] + <span class="hljs-number">4&#x27;d1</span>;<br>                nn[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span><br>                nn &lt;= nn + <span class="hljs-number">8&#x27;d1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Shift-Registers"><a href="#Shift-Registers" class="headerlink" title="Shift Registers"></a>Shift Registers</h4><h5 id="4-bit-shift-register"><a href="#4-bit-shift-register" class="headerlink" title="4-bit shift register"></a>4-bit shift register</h5><p><strong>Shift4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,  <span class="hljs-comment">// async active-high reset to zero</span><br>    <span class="hljs-keyword">input</span> load,<br>    <span class="hljs-keyword">input</span> ena,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] data,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q); <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            q &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (load || load &amp;&amp; ena)<br>                q &lt;= data;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ena)<br>                q &lt;= q &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Left-x2F-right-rotator"><a href="#Left-x2F-right-rotator" class="headerlink" title="Left&#x2F;right rotator"></a>Left&#x2F;right rotator</h5><p><strong>Rotate100</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> load,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] ena,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] data,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] q); <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<br>            q &lt;= data;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (^ena) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">case</span> (ena)<br>            <span class="hljs-number">2&#x27;b01</span>   : q &lt;= &#123;q[<span class="hljs-number">0</span>], q[<span class="hljs-number">99</span>:<span class="hljs-number">1</span>]&#125;;<br>            <span class="hljs-number">2&#x27;b10</span>   : q &lt;= &#123;q[<span class="hljs-number">98</span>:<span class="hljs-number">0</span>], q[<span class="hljs-number">99</span>]&#125;;<br>        <span class="hljs-keyword">endcase</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Left-x2F-right-arithmetic-shift-by-1-or-8"><a href="#Left-x2F-right-arithmetic-shift-by-1-or-8" class="headerlink" title="Left&#x2F;right arithmetic shift by 1 or 8"></a>Left&#x2F;right arithmetic shift by 1 or 8</h5><p><strong>Shift18</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> load,<br>    <span class="hljs-keyword">input</span> ena,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] amount,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">63</span>:<span class="hljs-number">0</span>] data,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">63</span>:<span class="hljs-number">0</span>] q); <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<br>            q &lt;= data;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ena) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (amount)<br>            <span class="hljs-number">2&#x27;b00</span>: q &lt;= &#123;q[<span class="hljs-number">62</span>:<span class="hljs-number">0</span>], <span class="hljs-number">1&#x27;b0</span>&#125;;<br>            <span class="hljs-number">2&#x27;b01</span>: q &lt;= &#123;q[<span class="hljs-number">55</span>:<span class="hljs-number">0</span>], <span class="hljs-number">8&#x27;b0</span>&#125;;<br>            <span class="hljs-number">2&#x27;b10</span>: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span> (q[<span class="hljs-number">63</span>] != <span class="hljs-number">0</span>)<br>                                q &lt;= &#123;<span class="hljs-number">1&#x27;b1</span>, q[<span class="hljs-number">63</span>:<span class="hljs-number">1</span>]&#125;;<br>                    <span class="hljs-keyword">else</span><br>                                q &lt;= &#123;<span class="hljs-number">1&#x27;b0</span>, q[<span class="hljs-number">63</span>:<span class="hljs-number">1</span>]&#125;;<br>                  <span class="hljs-keyword">end</span><br>                <span class="hljs-number">2&#x27;b11</span>:  <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span> (q[<span class="hljs-number">63</span>] != <span class="hljs-number">0</span>)<br>                                q &lt;= &#123;<span class="hljs-number">8&#x27;hff</span>, q[<span class="hljs-number">63</span>:<span class="hljs-number">8</span>]&#125;;<br>                    <span class="hljs-keyword">else</span><br>                                q &lt;= &#123;<span class="hljs-number">8&#x27;h00</span>, q[<span class="hljs-number">63</span>:<span class="hljs-number">8</span>]&#125;;<br>                  <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endcase</span><br>       <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> q &lt;= q;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="5-bit-LFSR"><a href="#5-bit-LFSR" class="headerlink" title="5-bit LFSR"></a>5-bit LFSR</h5><p><strong>Lfsr5</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Active-high synchronous reset to 5&#x27;h1</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] q<br>); <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            q &lt;= <span class="hljs-number">5&#x27;h1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">begin</span><br>                q[<span class="hljs-number">0</span>] &lt;= q[<span class="hljs-number">1</span>];<br>                q[<span class="hljs-number">1</span>] &lt;= q[<span class="hljs-number">2</span>];<br>                q[<span class="hljs-number">2</span>] &lt;= q[<span class="hljs-number">3</span>] ^ q[<span class="hljs-number">0</span>];<br>                q[<span class="hljs-number">3</span>] &lt;= q[<span class="hljs-number">4</span>];<br>                q[<span class="hljs-number">4</span>] &lt;= q[<span class="hljs-number">0</span>] ^ <span class="hljs-number">5&#x27;h0</span>;<br>            <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="3-bit-LFSR"><a href="#3-bit-LFSR" class="headerlink" title="3-bit LFSR"></a>3-bit LFSR</h5><p><strong>Mt2015 lfsr</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br><span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] SW,      <span class="hljs-comment">// R</span><br><span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] KEY,     <span class="hljs-comment">// L and clk</span><br><span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] LEDR);  <span class="hljs-comment">// Q</span><br><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> KEY[<span class="hljs-number">0</span>]) <span class="hljs-keyword">begin</span><br>        LEDR[<span class="hljs-number">0</span>] &lt;= KEY[<span class="hljs-number">1</span>] ? SW[<span class="hljs-number">0</span>] : LEDR[<span class="hljs-number">2</span>];<br>        LEDR[<span class="hljs-number">1</span>] &lt;= KEY[<span class="hljs-number">1</span>] ? SW[<span class="hljs-number">1</span>] : LEDR[<span class="hljs-number">0</span>];<br>        LEDR[<span class="hljs-number">2</span>] &lt;= KEY[<span class="hljs-number">1</span>] ? SW[<span class="hljs-number">2</span>] : LEDR[<span class="hljs-number">1</span>] ^ LEDR[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="32-bit-LFSR"><a href="#32-bit-LFSR" class="headerlink" title="32-bit LFSR"></a>32-bit LFSR</h5><p><strong>Lfsr32</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Active-high synchronous reset to 32&#x27;h1</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] q<br>); <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            q &lt;= <span class="hljs-number">32&#x27;h1</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= &#123;<span class="hljs-number">1&#x27;b0</span> ^ q[<span class="hljs-number">0</span>], q[<span class="hljs-number">31</span>:<span class="hljs-number">23</span>], q[<span class="hljs-number">22</span>] ^ q[<span class="hljs-number">0</span>], q[<span class="hljs-number">21</span>:<span class="hljs-number">3</span>], q[<span class="hljs-number">2</span>] ^ q[<span class="hljs-number">0</span>], q[<span class="hljs-number">1</span>] ^ q[<span class="hljs-number">0</span>]&#125;;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Shift-register"><a href="#Shift-register" class="headerlink" title="Shift register"></a>Shift register</h5><p><strong>Exams&#x2F;m2014 q4k</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> resetn,   <span class="hljs-comment">// synchronous reset</span><br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">output</span> out);<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q_tmp;<br>    dffu dff0 (clk, resetn, in, q_tmp[<span class="hljs-number">0</span>]);<br>    dffu dff1 (clk, resetn, q_tmp[<span class="hljs-number">0</span>], q_tmp[<span class="hljs-number">1</span>]);<br>    dffu dff2 (clk, resetn, q_tmp[<span class="hljs-number">1</span>], q_tmp[<span class="hljs-number">2</span>]);<br>    dffu dff3 (clk, resetn, q_tmp[<span class="hljs-number">2</span>], q_tmp[<span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">assign</span> out = q_tmp[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> dffu (<br>    <span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> reset,<br><span class="hljs-keyword">input</span> d_in,<br>    <span class="hljs-keyword">output</span> q_out);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (!reset)<br>            q_out &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            q_out &lt;= d_in;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Shift-register-1"><a href="#Shift-register-1" class="headerlink" title="Shift register"></a>Shift register</h5><p><strong>Exams&#x2F;2014 q4b</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] SW,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] KEY,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] LEDR<br>); <br>    MUXDFF muxdff3 (KEY[<span class="hljs-number">0</span>], KEY[<span class="hljs-number">3</span>], SW[<span class="hljs-number">3</span>], KEY[<span class="hljs-number">1</span>], KEY[<span class="hljs-number">2</span>], LEDR[<span class="hljs-number">3</span>]);<br>    MUXDFF muxdff2 (KEY[<span class="hljs-number">0</span>], LEDR[<span class="hljs-number">3</span>], SW[<span class="hljs-number">2</span>], KEY[<span class="hljs-number">1</span>], KEY[<span class="hljs-number">2</span>], LEDR[<span class="hljs-number">2</span>]);<br>    MUXDFF muxdff1 (KEY[<span class="hljs-number">0</span>], LEDR[<span class="hljs-number">2</span>], SW[<span class="hljs-number">1</span>], KEY[<span class="hljs-number">1</span>], KEY[<span class="hljs-number">2</span>], LEDR[<span class="hljs-number">1</span>]);<br>    MUXDFF muxdff0 (KEY[<span class="hljs-number">0</span>], LEDR[<span class="hljs-number">1</span>], SW[<span class="hljs-number">0</span>], KEY[<span class="hljs-number">1</span>], KEY[<span class="hljs-number">2</span>], LEDR[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">endmodule</span><br><br><span class="hljs-keyword">module</span> MUXDFF (<br>    <span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> w,<br>    <span class="hljs-keyword">input</span> R,<br>    <span class="hljs-keyword">input</span> E,<br>    <span class="hljs-keyword">input</span> L,<br><span class="hljs-keyword">output</span> Q);<br>    <span class="hljs-keyword">wire</span> tmp;<br>    <span class="hljs-keyword">assign</span> tmp = L ? R : (E ? w : Q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        Q &lt;= tmp;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="3-input-LUT"><a href="#3-input-LUT" class="headerlink" title="3-input LUT"></a>3-input LUT</h5><p><strong>Exams&#x2F;ece241 2013 q12</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> enable,<br>    <span class="hljs-keyword">input</span> S,<br>    <span class="hljs-keyword">input</span> A, B, C,<br>    <span class="hljs-keyword">output</span> Z ); <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] q;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (enable)<br>            q &lt;= &#123;q[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>], S&#125;;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> Z = q[&#123;A, B, C&#125;];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="More-Circuits"><a href="#More-Circuits" class="headerlink" title="More Circuits"></a>More Circuits</h4><h5 id="Rule-90"><a href="#Rule-90" class="headerlink" title="Rule 90"></a>Rule 90</h5><p><strong>Rule90</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> load,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">511</span>:<span class="hljs-number">0</span>] data,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">511</span>:<span class="hljs-number">0</span>] q ); <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<br>        q &lt;= data;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            q[<span class="hljs-number">0</span>] &lt;= q[<span class="hljs-number">1</span>] ^ <span class="hljs-number">0</span>;<br>            q[<span class="hljs-number">511</span>] &lt;= <span class="hljs-number">0</span> ^ q[<span class="hljs-number">510</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">511</span>; i=i+<span class="hljs-number">1</span>)<br>                q[i] &lt;= q[i+<span class="hljs-number">1</span>] ^ q[i-<span class="hljs-number">1</span>]; <br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Rule-110"><a href="#Rule-110" class="headerlink" title="Rule 110"></a>Rule 110</h5><p><strong>Rule110</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> load,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">511</span>:<span class="hljs-number">0</span>] data,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">511</span>:<span class="hljs-number">0</span>] q ); <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<br>        q &lt;= data;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            q[<span class="hljs-number">0</span>] &lt;= q[<span class="hljs-number">0</span>];<br>            q[<span class="hljs-number">511</span>] &lt;= (q[<span class="hljs-number">511</span>] ^ q[<span class="hljs-number">510</span>]) || q[<span class="hljs-number">510</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">511</span>; i=i+<span class="hljs-number">1</span>)<br>                q[i] &lt;= q[i] &amp; (~q[i-<span class="hljs-number">1</span>]) | (~q[i+<span class="hljs-number">1</span>]) &amp; q[i-<span class="hljs-number">1</span>] | (~q[i]) &amp; q[i-<span class="hljs-number">1</span>]; <span class="hljs-comment">// logical expression: F = b ^ c + ~a &amp; c;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Conway’s-Game-of-Life-16x16"><a href="#Conway’s-Game-of-Life-16x16" class="headerlink" title="Conway’s Game of Life 16x16"></a>Conway’s Game of Life 16x16</h5><p><strong>Conwaylife</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> load,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] data,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] q ); <br>    <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] nb [<span class="hljs-number">255</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] mix [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>];<br><span class="hljs-keyword">integer</span> i, j;<br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j=j+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                 nb[i*<span class="hljs-number">16</span>+j] = mix[ ((i-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ][ ((j+<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ]+<br>                              mix[ ((i-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ][ j ]+<br>                              mix[ ((i-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ][ ((j-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ]+<br>                              mix[ i ][ ((j-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ]+<br>                              mix[ ((i+<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ][ ((j-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ]+<br>                              mix[ ((i+<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ][ j ]+<br>                              mix[ ((i+<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ][ ((j+<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ]+<br>                              mix[ i ][ ((j+<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">16</span>)%<span class="hljs-number">16</span> ];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j=j+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                    mix[i][j] &lt;= data[<span class="hljs-number">16</span>*i + j];<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j=j+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span> (nb[i*<span class="hljs-number">16</span> + j] &lt; <span class="hljs-number">2</span>)<br>                        mix[i][j] &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nb[i*<span class="hljs-number">16</span> + j] == <span class="hljs-number">3</span>)<br>                        mix[i][j] &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nb[i*<span class="hljs-number">16</span> + j] &gt; <span class="hljs-number">3</span>)<br>                        mix[i][j] &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>                    <span class="hljs-keyword">else</span><br>                        mix[i][j] &lt;= mix[i][j];<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j=j+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                q[<span class="hljs-number">16</span>*i + j] = mix[i][j];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Finite-State-Machines"><a href="#Finite-State-Machines" class="headerlink" title="Finite State Machines"></a>Finite State Machines</h4><h5 id="Simple-FSM-1-asynchronous-reset"><a href="#Simple-FSM-1-asynchronous-reset" class="headerlink" title="Simple FSM 1 (asynchronous reset)"></a>Simple FSM 1 (asynchronous reset)</h5><p><strong>Fsm1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,    <span class="hljs-comment">// Asynchronous reset to state B</span><br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">output</span> out);<span class="hljs-comment">//  </span><br><br>    <span class="hljs-keyword">parameter</span> A=<span class="hljs-number">0</span>, B=<span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">reg</span> state, next_state;<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span>    <span class="hljs-comment">// This is a combinational always block</span><br>        <span class="hljs-keyword">case</span> (state)<br>            A: next_state = in ? A : B;<br>            B: next_state = in ? B : A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span>    <span class="hljs-comment">// This is a sequential always block</span><br>        <span class="hljs-comment">// State flip-flops with asynchronous reset</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= B;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-comment">// assign out = (state == ...);</span><br>    <span class="hljs-keyword">assign</span> out = (state == B);<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-FSM-1-synchronous-reset"><a href="#Simple-FSM-1-synchronous-reset" class="headerlink" title="Simple FSM 1 (synchronous reset)"></a>Simple FSM 1 (synchronous reset)</h5><p><strong>Fsm1s</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// Note the Verilog-1995 module declaration syntax here:</span><br><span class="hljs-keyword">module</span> top_module(clk, reset, in, out);<br>    <span class="hljs-keyword">input</span> clk;<br>    <span class="hljs-keyword">input</span> reset;    <span class="hljs-comment">// Synchronous reset to state B</span><br>    <span class="hljs-keyword">input</span> in;<br>    <span class="hljs-keyword">output</span> out;<span class="hljs-comment">//  </span><br>    <span class="hljs-keyword">reg</span> out;<br><br>    <span class="hljs-comment">// Fill in state name declarations</span><br>   <span class="hljs-keyword">parameter</span> A=<span class="hljs-number">0</span>, B=<span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">reg</span> present_state, next_state;<br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            present_state &lt;= B;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">case</span> (present_state)<br>                <span class="hljs-comment">// Fill in state transition logic</span><br>                A : next_state = in ? A : B;<br>                B : next_state = in ? B : A;<br>            <span class="hljs-keyword">endcase</span><br><br>            <span class="hljs-comment">// State flip-flops</span><br>            present_state = next_state;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> out = (present_state == B);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-FSM-2-asynchronous-reset"><a href="#Simple-FSM-2-asynchronous-reset" class="headerlink" title="Simple FSM 2 (asynchronous reset)"></a>Simple FSM 2 (asynchronous reset)</h5><p><strong>Fsm2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,    <span class="hljs-comment">// Asynchronous reset to OFF</span><br>    <span class="hljs-keyword">input</span> j,<br>    <span class="hljs-keyword">input</span> k,<br>    <span class="hljs-keyword">output</span> out); <span class="hljs-comment">//  </span><br><br>    <span class="hljs-keyword">parameter</span> OFF=<span class="hljs-number">0</span>, ON=<span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">reg</span> state, next_state;<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State transition logic</span><br>        <span class="hljs-keyword">case</span> (state)<br>            OFF : next_state &lt;= j ? ON : OFF;<br>            ON  : next_state &lt;= k ? OFF : ON;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State flip-flops with asynchronous reset</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= OFF;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-comment">// assign out = (state == ...);</span><br>    <span class="hljs-keyword">assign</span> out = (state == ON);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-FSM-2-synchronous-reset"><a href="#Simple-FSM-2-synchronous-reset" class="headerlink" title="Simple FSM 2 (synchronous reset)"></a>Simple FSM 2 (synchronous reset)</h5><p><strong>Fsm2s</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Synchronous reset to OFF</span><br>    <span class="hljs-keyword">input</span> j,<br>    <span class="hljs-keyword">input</span> k,<br>    <span class="hljs-keyword">output</span> out); <span class="hljs-comment">//  </span><br><br>    <span class="hljs-keyword">parameter</span> OFF=<span class="hljs-number">0</span>, ON=<span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">reg</span> state, next_state;<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State transition logic</span><br>        <span class="hljs-keyword">case</span> (state)<br>            OFF : next_state = j ? ON : OFF;<br>            ON  : next_state = k ? OFF : ON;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State flip-flops with synchronous reset</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= OFF;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">case</span> (&#123;j, k&#125;)<br>                <span class="hljs-number">2&#x27;b00</span>:state &lt;= state;<br>                <span class="hljs-number">2&#x27;b01</span>:state &lt;= <span class="hljs-number">0</span>;<br>                <span class="hljs-number">2&#x27;b10</span>:state &lt;= <span class="hljs-number">1</span>;<br>                <span class="hljs-number">2&#x27;b11</span>:state &lt;= ~state;<br>            <span class="hljs-keyword">endcase</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-comment">// assign out = (state == ...);</span><br>    <span class="hljs-keyword">assign</span> out = (state == ON);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-state-transitions-3"><a href="#Simple-state-transitions-3" class="headerlink" title="Simple state transitions 3"></a>Simple state transitions 3</h5><p><strong>Fsm3comb</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] next_state,<br>    <span class="hljs-keyword">output</span> out); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">parameter</span> A=<span class="hljs-number">0</span>, B=<span class="hljs-number">1</span>, C=<span class="hljs-number">2</span>, D=<span class="hljs-number">3</span>;<br>    <br>    <span class="hljs-comment">// State transition logic: next_state = f(state, in)</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            A:next_state = in ? B : A;<br>            B:next_state = in ? B : C;<br>C:next_state = in ? D : A;<br>            D:next_state = in ? B : C;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// Output logic:  out = f(state) for a Moore state machine</span><br><span class="hljs-keyword">assign</span> out = (state == D);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-one-hot-state-transitions-3"><a href="#Simple-one-hot-state-transitions-3" class="headerlink" title="Simple one-hot state transitions 3"></a>Simple one-hot state transitions 3</h5><p><strong>Fsm3onehot</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] state,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] next_state,<br>    <span class="hljs-keyword">output</span> out); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">parameter</span> A=<span class="hljs-number">0</span>, B=<span class="hljs-number">1</span>, C=<span class="hljs-number">2</span>, D=<span class="hljs-number">3</span>;<br><br>    <span class="hljs-comment">// State transition logic: Derive an equation for each state flip-flop.</span><br>    <span class="hljs-keyword">assign</span> next_state[A] = state[A] &amp; ~in | state[C] &amp; ~in;<br>    <span class="hljs-keyword">assign</span> next_state[B] = state[A] &amp; in | state[B] &amp; in | state[D] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[C] = state[B] &amp; ~in | state[D] &amp; ~in;<br>    <span class="hljs-keyword">assign</span> next_state[D] = state[C] &amp; in;<br><br>    <span class="hljs-comment">// Output logic: </span><br>    <span class="hljs-keyword">assign</span> out = state[D];<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-FSM-3-asynchronous-reset"><a href="#Simple-FSM-3-asynchronous-reset" class="headerlink" title="Simple FSM 3 (asynchronous reset)"></a>Simple FSM 3 (asynchronous reset)</h5><p><strong>Fsm3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">output</span> out); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">parameter</span> A = <span class="hljs-number">2&#x27;b00</span>, B = <span class="hljs-number">2&#x27;b01</span>, C = <span class="hljs-number">2&#x27;b10</span>, D = <span class="hljs-number">2&#x27;b11</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <span class="hljs-comment">// State transition logic</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        A:next_state = in ? B : A;<br>            B:next_state = in ? B : C;<br>            C:next_state = in ? D : A;<br>            D:next_state = in ? B : C;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// State flip-flops with asynchronous reset</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-keyword">assign</span> out = (state == D);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Simple-FSM-3-synchronous-reset"><a href="#Simple-FSM-3-synchronous-reset" class="headerlink" title="Simple FSM 3 (synchronous reset)"></a>Simple FSM 3 (synchronous reset)</h5><p><strong>Fsm3s</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> out); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">parameter</span> A = <span class="hljs-number">2&#x27;d0</span>, B = <span class="hljs-number">2&#x27;d1</span>, C = <span class="hljs-number">2&#x27;d2</span>, D = <span class="hljs-number">2&#x27;d3</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-comment">// State transition logic</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            A:next_state = in ? B : A;<br>            B:next_state = in ? B : C;<br>            C:next_state = in ? D : A;<br>            D:next_state = in ? B : C;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// State flip-flops with synchronous reset</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-keyword">assign</span> out = (state == D);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Design-a-Moore-FSM"><a href="#Design-a-Moore-FSM" class="headerlink" title="Design a Moore FSM"></a>Design a Moore FSM</h5><p><strong>Exams&#x2F;ece241 2013 q4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">1</span>] s,<br>    <span class="hljs-keyword">output</span> fr3,<br>    <span class="hljs-keyword">output</span> fr2,<br>    <span class="hljs-keyword">output</span> fr1,<br>    <span class="hljs-keyword">output</span> dfr<br>); <br><span class="hljs-keyword">parameter</span> S0 = <span class="hljs-number">3&#x27;d0</span>, S1 = <span class="hljs-number">3&#x27;d1</span>, S12 = <span class="hljs-number">3&#x27;d2</span>, S2 = <span class="hljs-number">3&#x27;d3</span>, S23 = <span class="hljs-number">3&#x27;d4</span>, S3 = <span class="hljs-number">3&#x27;d5</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-comment">//State transtion logic</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            S0:next_state = s[<span class="hljs-number">1</span>] ? S1 : S0;<br>            S1:next_state = s[<span class="hljs-number">2</span>] ? S2 : (s[<span class="hljs-number">1</span>] ? S1 : S0);<br>            S12:next_state = s[<span class="hljs-number">2</span>] ? S2 : (s[<span class="hljs-number">1</span>] ? S12 : S0);<br>            S2:next_state = s[<span class="hljs-number">3</span>] ? S3 : (s[<span class="hljs-number">2</span>] ? S2 : S12);<br>            S23:next_state = s[<span class="hljs-number">3</span>] ? S3 : (s[<span class="hljs-number">2</span>] ? S23 : S12);<br>            S3:next_state = s[<span class="hljs-number">3</span>] ? S3 : S23;<br>            <span class="hljs-keyword">default</span>:next_state = <span class="hljs-number">&#x27;dx</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">//state flip-flops with synchronous reset</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= S0;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">//Combinational output logic</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            S0:&#123;fr3, fr2, fr1, dfr&#125; = <span class="hljs-number">4&#x27;b1111</span>;<br>            S1:&#123;fr3, fr2, fr1, dfr&#125; = <span class="hljs-number">4&#x27;b0110</span>; <br>            S12:&#123;fr3, fr2, fr1, dfr&#125; = <span class="hljs-number">4&#x27;b0111</span>;<br>            S2:&#123;fr3, fr2, fr1, dfr&#125; = <span class="hljs-number">4&#x27;b0010</span>;<br>            S23:&#123;fr3, fr2, fr1, dfr&#125; = <span class="hljs-number">4&#x27;b0011</span>;<br>            S3:&#123;fr3, fr2, fr1, dfr&#125; = <span class="hljs-number">4&#x27;b0000</span>;<br>            <span class="hljs-keyword">default</span>:&#123;fr3, fr2, fr1, dfr&#125; = &#x27;x;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Lemmings-1"><a href="#Lemmings-1" class="headerlink" title="Lemmings 1"></a>Lemmings 1</h5><p><strong>Lemmings1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,    <span class="hljs-comment">// Freshly brainwashed Lemmings walk left.</span><br>    <span class="hljs-keyword">input</span> bump_left,<br>    <span class="hljs-keyword">input</span> bump_right,<br>    <span class="hljs-keyword">output</span> walk_left,<br>    <span class="hljs-keyword">output</span> walk_right); <span class="hljs-comment">//  </span><br><br>    <span class="hljs-comment">// parameter LEFT=0, RIGHT=1, ...</span><br>    <span class="hljs-keyword">parameter</span> LEFT = <span class="hljs-number">0</span>, RIGHT = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">reg</span> state, next_state;<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State transition logic</span><br>        <span class="hljs-keyword">case</span> (state)<br>            LEFT:next_state = bump_left ? RIGHT : LEFT;<br>            RIGHT:next_state = bump_right ? LEFT : RIGHT;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State flip-flops with asynchronous reset</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= LEFT;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-comment">// assign walk_left = (state == ...);</span><br>    <span class="hljs-comment">// assign walk_right = (state == ...);</span><br>    <span class="hljs-keyword">assign</span> walk_left = (state == LEFT);<br>    <span class="hljs-keyword">assign</span> walk_right = (state == RIGHT);<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h5 id="Lemmings-2"><a href="#Lemmings-2" class="headerlink" title="Lemmings 2"></a>Lemmings 2</h5><p><strong>Lemmings2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,    <span class="hljs-comment">// Freshly brainwashed Lemmings walk left.</span><br>    <span class="hljs-keyword">input</span> bump_left,<br>    <span class="hljs-keyword">input</span> bump_right,<br>    <span class="hljs-keyword">input</span> ground,<br>    <span class="hljs-keyword">output</span> walk_left,<br>    <span class="hljs-keyword">output</span> walk_right,<br>    <span class="hljs-keyword">output</span> aaah ); <br>    <br>    <span class="hljs-comment">// parameter LEFT=0, RIGHT=1, ...</span><br>    <span class="hljs-keyword">parameter</span> LEFT = <span class="hljs-number">0</span>, RIGHT = <span class="hljs-number">1</span>, FALL_L = <span class="hljs-number">2</span>, FALL_R = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state, next_state;<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State transition logic</span><br>        <span class="hljs-keyword">case</span> (state)<br>            LEFT:next_state = ground ? (bump_left ? RIGHT : LEFT) : FALL_L;<br>            RIGHT:next_state = ground ? (bump_right ? LEFT : RIGHT) : FALL_R;<br>            FALL_L:next_state = ground ? LEFT : FALL_L;<br>            FALL_R:next_state = ground ? RIGHT : FALL_R;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State flip-flops with asynchronous reset</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= LEFT;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-keyword">assign</span> walk_left = (state == LEFT);<br>    <span class="hljs-keyword">assign</span> walk_right = (state == RIGHT);<br>    <span class="hljs-keyword">assign</span> aaah = (state == FALL_L || state == FALL_R);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Lemmings-3"><a href="#Lemmings-3" class="headerlink" title="Lemmings 3"></a>Lemmings 3</h5><p><strong>Lemmings3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,    <span class="hljs-comment">// Freshly brainwashed Lemmings walk left.</span><br>    <span class="hljs-keyword">input</span> bump_left,<br>    <span class="hljs-keyword">input</span> bump_right,<br>    <span class="hljs-keyword">input</span> ground,<br>    <span class="hljs-keyword">input</span> dig,<br>    <span class="hljs-keyword">output</span> walk_left,<br>    <span class="hljs-keyword">output</span> walk_right,<br>    <span class="hljs-keyword">output</span> aaah,<br>    <span class="hljs-keyword">output</span> digging ); <br>    <br>    <span class="hljs-comment">// parameter LEFT=0, RIGHT=1, ...</span><br>    <span class="hljs-keyword">parameter</span> LEFT = <span class="hljs-number">0</span>, RIGHT = <span class="hljs-number">1</span>, FALL_L = <span class="hljs-number">2</span>, FALL_R = <span class="hljs-number">3</span>, DIG_L = <span class="hljs-number">4</span>, DIG_R = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State transition logic</span><br>        <span class="hljs-keyword">case</span> (state)<br>            LEFT:next_state = ground ? (dig ? DIG_L : (bump_left ? RIGHT : LEFT)) : FALL_L;<br>            RIGHT:next_state = ground ? (dig ? DIG_R : (bump_right ? LEFT : RIGHT)) : FALL_R;<br>            FALL_L:next_state = ground ? LEFT : FALL_L;<br>            FALL_R:next_state = ground ? RIGHT : FALL_R;<br>            DIG_L:next_state = ground ? DIG_L : FALL_L;<br>            DIG_R:next_state = ground ? DIG_R : FALL_R;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State flip-flops with asynchronous reset</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= LEFT;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-keyword">assign</span> walk_left = (state == LEFT);<br>    <span class="hljs-keyword">assign</span> walk_right = (state == RIGHT);<br>    <span class="hljs-keyword">assign</span> aaah = (state == FALL_L || state == FALL_R);<br>    <span class="hljs-keyword">assign</span> digging = (state == DIG_L || state == DIG_R);<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Lemmings-4"><a href="#Lemmings-4" class="headerlink" title="Lemmings 4"></a>Lemmings 4</h5><p><strong>Lemmings4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,    <span class="hljs-comment">// Freshly brainwashed Lemmings walk left.</span><br>    <span class="hljs-keyword">input</span> bump_left,<br>    <span class="hljs-keyword">input</span> bump_right,<br>    <span class="hljs-keyword">input</span> ground,<br>    <span class="hljs-keyword">input</span> dig,<br>    <span class="hljs-keyword">output</span> walk_left,<br>    <span class="hljs-keyword">output</span> walk_right,<br>    <span class="hljs-keyword">output</span> aaah,<br>    <span class="hljs-keyword">output</span> digging ); <br><br>    <span class="hljs-comment">// Parameter LEFT, RIGHT, FALL_L, FALL_R, DIG_L, DIG_R, SPLAT;</span><br>    <span class="hljs-keyword">parameter</span> LEFT = <span class="hljs-number">0</span>, RIGHT = <span class="hljs-number">1</span>, FALL_L = <span class="hljs-number">2</span>, FALL_R = <span class="hljs-number">3</span>, DIG_L = <span class="hljs-number">4</span>, DIG_R = <span class="hljs-number">5</span>, SPLAT = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] threshold;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">// State transition logic</span><br>        <span class="hljs-keyword">case</span> (state)<br>            LEFT:next_state = ground ? (dig ? DIG_L : (bump_left ? RIGHT : LEFT)) : FALL_L;<br>            RIGHT:next_state = ground ? (dig ? DIG_R : (bump_right ? LEFT : RIGHT)) : FALL_R;<br>            FALL_L:next_state = ground ? (threshold &gt; <span class="hljs-number">19</span> ? SPLAT : LEFT) : FALL_L;<br>            FALL_R:next_state = ground ? (threshold &gt; <span class="hljs-number">19</span> ? SPLAT : RIGHT) : FALL_R;<br>            DIG_L:next_state = ground ? DIG_L : FALL_L;<br>            DIG_R:next_state = ground ? DIG_R : FALL_R;<br>            SPLAT:next_state = SPLAT;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>    <span class="hljs-comment">// State Flip-Flops with asynchronous reset</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= LEFT;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            state &lt;= next_state;<br>        threshold &lt;= (state == FALL_L || state == FALL_R) ? (threshold + <span class="hljs-number">1</span>) : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-comment">//Output logic</span><br>        <span class="hljs-keyword">case</span> (state)<br>            LEFT:&#123;walk_left, walk_right, aaah, digging&#125; = <span class="hljs-number">4&#x27;b1000</span>;<br>            RIGHT:&#123;walk_left, walk_right, aaah, digging&#125; = <span class="hljs-number">4&#x27;b0100</span>;<br>            FALL_L:&#123;walk_left, walk_right, aaah, digging&#125; = <span class="hljs-number">4&#x27;b0010</span>;<br>            FALL_R:&#123;walk_left, walk_right, aaah, digging&#125; = <span class="hljs-number">4&#x27;b0010</span>;<br>            DIG_L:&#123;walk_left, walk_right, aaah, digging&#125; = <span class="hljs-number">4&#x27;b0001</span>;<br>            DIG_R:&#123;walk_left, walk_right, aaah, digging&#125; = <span class="hljs-number">4&#x27;b0001</span>;<br>            SPLAT:&#123;walk_left, walk_right, aaah, digging&#125; = <span class="hljs-number">4&#x27;b0000</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="One-hot-FSM"><a href="#One-hot-FSM" class="headerlink" title="One-hot FSM"></a>One-hot FSM</h5><p><strong>Fsm onehot</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] state,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] next_state,<br>    <span class="hljs-keyword">output</span> out1,<br>    <span class="hljs-keyword">output</span> out2);<br><br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">9</span>] = state[<span class="hljs-number">6</span>] &amp; ~in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">8</span>] = state[<span class="hljs-number">5</span>] &amp; ~in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">7</span>] = state[<span class="hljs-number">6</span>] &amp; in | state[<span class="hljs-number">7</span>] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">6</span>] = state[<span class="hljs-number">5</span>] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">5</span>] = state[<span class="hljs-number">4</span>] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">4</span>] = state[<span class="hljs-number">3</span>] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">3</span>] = state[<span class="hljs-number">2</span>] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">2</span>] = state[<span class="hljs-number">1</span>] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">1</span>] = state[<span class="hljs-number">0</span>] &amp; in | state[<span class="hljs-number">8</span>] &amp; in | state[<span class="hljs-number">9</span>] &amp; in;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">0</span>] = state[<span class="hljs-number">0</span>] &amp; ~in | state[<span class="hljs-number">1</span>] &amp; ~in |<br>                           state[<span class="hljs-number">2</span>] &amp; ~in | state[<span class="hljs-number">3</span>] &amp; ~in |<br>                           state[<span class="hljs-number">4</span>] &amp; ~in | state[<span class="hljs-number">7</span>] &amp; ~in |<br>                           state[<span class="hljs-number">8</span>] &amp; ~in | state[<span class="hljs-number">9</span>] &amp; ~in;<br>    <span class="hljs-keyword">assign</span> out1 = state[<span class="hljs-number">8</span>] | state[<span class="hljs-number">9</span>];<br>    <span class="hljs-keyword">assign</span> out2 = state[<span class="hljs-number">7</span>] | state[<span class="hljs-number">9</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="PS-x2F-2-packet-parser"><a href="#PS-x2F-2-packet-parser" class="headerlink" title="PS&#x2F;2 packet parser"></a>PS&#x2F;2 packet parser</h5><p><strong>Fsm ps2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">output</span> done); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">parameter</span> BYTE1 = <span class="hljs-number">2&#x27;d0</span>, BYTE2 = <span class="hljs-number">2&#x27;d1</span>, BYTE3 = <span class="hljs-number">2&#x27;d2</span>, DONE =<span class="hljs-number">2&#x27;d3</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] next_state;<br>    <br>    <span class="hljs-comment">// State transition logic (combinational)</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            BYTE1:next_state = in[<span class="hljs-number">3</span>] ? BYTE2 : BYTE1;<br>            BYTE2:next_state = BYTE3;<br>            BYTE3:next_state = DONE;<br>            DONE:next_state = in[<span class="hljs-number">3</span>] ? BYTE2 : BYTE1;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// State flip-flops (sequential)</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= BYTE1;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-keyword">assign</span> done = (state == DONE);<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h5 id="PS-x2F-2-packet-parser-and-datapath"><a href="#PS-x2F-2-packet-parser-and-datapath" class="headerlink" title="PS&#x2F;2 packet parser and datapath"></a>PS&#x2F;2 packet parser and datapath</h5><p><strong>Fsm ps2data</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">23</span>:<span class="hljs-number">0</span>] out_bytes,<br>    <span class="hljs-keyword">output</span> done); <span class="hljs-comment">//</span><br><br>    <span class="hljs-comment">// FSM from fsm_ps2</span><br>    <span class="hljs-keyword">parameter</span> BYTE1 = <span class="hljs-number">2&#x27;d0</span>, BYTE2 = <span class="hljs-number">2&#x27;d1</span>, BYTE3 = <span class="hljs-number">2&#x27;d2</span>, DONE =<span class="hljs-number">2&#x27;d3</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] next_state;<br>    <br>    <span class="hljs-comment">// State transition logic (combinational)</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            BYTE1:next_state = in[<span class="hljs-number">3</span>] ? BYTE2 : BYTE1;<br>            BYTE2:next_state = BYTE3;<br>            BYTE3:next_state = DONE;<br>            DONE:next_state = in[<span class="hljs-number">3</span>] ? BYTE2 : BYTE1;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// State flip-flops (sequential)</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= BYTE1;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-comment">// New: Datapath to store incoming bytes.</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            BYTE1:out_bytes[<span class="hljs-number">23</span>:<span class="hljs-number">16</span>] &lt;= in;<br>            BYTE2:out_bytes[<span class="hljs-number">15</span>:<span class="hljs-number">8</span>] &lt;= in;<br>            BYTE3:out_bytes[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] &lt;= in;<br>            DONE:out_bytes[<span class="hljs-number">23</span>:<span class="hljs-number">16</span>] &lt;= in;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> done = (state == DONE);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Serial-receiver"><a href="#Serial-receiver" class="headerlink" title="Serial receiver"></a>Serial receiver</h5><p><strong>Fsm serial</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">output</span> done<br>); <br>    <span class="hljs-comment">//Define all states and intermediate states</span><br>    <span class="hljs-keyword">localparam</span> IDLE = <span class="hljs-number">3&#x27;d0</span>, START = <span class="hljs-number">3&#x27;d1</span>, DATA = <span class="hljs-number">3&#x27;d2</span>, STOP = <span class="hljs-number">3&#x27;d3</span>, ERROR = <span class="hljs-number">3&#x27;d4</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] count;<br>    <span class="hljs-keyword">reg</span> temp;<br>    <span class="hljs-comment">//State transition logic (combinational)</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        IDLE:next_state = in ? IDLE : START;<br>            START:next_state = DATA;<br>            DATA:next_state = (count == <span class="hljs-number">8</span>) ? (in ? STOP : ERROR) : DATA;<br>            STOP:next_state = in ? IDLE : START;<br>            ERROR:next_state = in ? IDLE : ERROR;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">//State flip-flops (sequential) with synchronous reset</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= IDLE;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">//Count data input bit</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            count &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">case</span> (next_state)<br>            START:count &lt;= <span class="hljs-number">0</span>;<br>                DATA:count &lt;= count + <span class="hljs-number">4&#x27;b1</span>;<br>                <span class="hljs-keyword">default</span>:count &lt;= count;<br>            <span class="hljs-keyword">endcase</span>   <br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (next_state)<br>        STOP:temp &lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">default</span>:temp &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>   <span class="hljs-comment">//Output logic</span><br>    <span class="hljs-keyword">assign</span> done = temp;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Serial-receiver-and-datapath"><a href="#Serial-receiver-and-datapath" class="headerlink" title="Serial receiver and datapath"></a>Serial receiver and datapath</h5><p><strong>Fsm serialdata</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out_byte,<br>    <span class="hljs-keyword">output</span> done<br>); <span class="hljs-comment">//</span><br><br>    <span class="hljs-comment">// Use FSM from Fsm_serial</span><br>    <span class="hljs-comment">// Define all states and intermediate states</span><br>    <span class="hljs-keyword">localparam</span> IDLE = <span class="hljs-number">3&#x27;d0</span>, START = <span class="hljs-number">3&#x27;d1</span>, DATA = <span class="hljs-number">3&#x27;d2</span>, STOP = <span class="hljs-number">3&#x27;d3</span>, ERROR = <span class="hljs-number">3&#x27;d4</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] count;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out;<br>    <span class="hljs-keyword">reg</span> temp;<br>    <span class="hljs-comment">// State transition logic (combinational)</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        IDLE:next_state = in ? IDLE : START;<br>            START:next_state = DATA;<br>            DATA:next_state = (count == <span class="hljs-number">8</span>) ? (in ? STOP : ERROR) : DATA;<br>            STOP:next_state = in ? IDLE : START;<br>            ERROR:next_state = in ? IDLE : ERROR;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// State flip-flops (sequential) with synchronous reset</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= IDLE;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// Output databytes logic</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            out &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">case</span> (next_state)<br>                START:out &lt;= <span class="hljs-number">8&#x27;b0</span>;<br>                DATA:out &lt;= &#123;in, out[<span class="hljs-number">7</span>:<span class="hljs-number">1</span>]&#125;;<br>            <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// Count data input bit</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            count &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">case</span> (next_state)<br>            START:count &lt;= <span class="hljs-number">0</span>;<br>                DATA:count &lt;= count + <span class="hljs-number">4&#x27;b1</span>;<br>                <span class="hljs-keyword">default</span>:count &lt;= count;<br>            <span class="hljs-keyword">endcase</span>   <br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (next_state)<br>        STOP:temp &lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">default</span>:temp &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>   <span class="hljs-comment">// Output logic</span><br>    <span class="hljs-keyword">assign</span> done = temp;<br>    <span class="hljs-comment">// New: Datapath to latch input bits.</span><br><span class="hljs-keyword">assign</span> out_byte = out;<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Serial-receiver-with-parity-checking"><a href="#Serial-receiver-with-parity-checking" class="headerlink" title="Serial receiver with parity checking"></a>Serial receiver with parity checking</h5><p><strong>Fsm serialdp</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br><span class="hljs-keyword">input</span> clk,<br><span class="hljs-keyword">input</span> in,<br><span class="hljs-keyword">input</span> reset, <span class="hljs-comment">// Synchronous reset</span><br><span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out_byte,<br><span class="hljs-keyword">output</span> done<br>);<br><br><span class="hljs-keyword">localparam</span> IDLE=<span class="hljs-number">0</span>, START=<span class="hljs-number">1</span>, DATA=<span class="hljs-number">2</span>, STOP=<span class="hljs-number">3</span>, ERROR=<span class="hljs-number">4</span>, CHECK=<span class="hljs-number">6</span>;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state,next_state;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] count;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out;<br><span class="hljs-keyword">wire</span> odd,start;<br><span class="hljs-keyword">reg</span> check;<br><br>parity parity_inst(<span class="hljs-variable">.clk</span>(clk), <span class="hljs-variable">.reset</span>(reset|start), <span class="hljs-variable">.in</span>(in), <span class="hljs-variable">.odd</span>(odd));<br><br><span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>    start =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">case</span> (state)<br>        IDLE    :   <span class="hljs-keyword">begin</span> next_state = in? IDLE : START; start = <span class="hljs-number">1</span>; <span class="hljs-keyword">end</span><br>        START   :   next_state = DATA;<br>        DATA    :   next_state = (count==<span class="hljs-number">7</span>) ? CHECK : DATA;<br>        CHECK   :   next_state = in ? STOP : ERROR;<br>        STOP    :   <span class="hljs-keyword">begin</span> next_state = in ? IDLE : START; start = <span class="hljs-number">1</span>; <span class="hljs-keyword">end</span><br>        ERROR   :   next_state = in ? IDLE : ERROR;<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset)<br>        state &lt;= IDLE;<br>    <span class="hljs-keyword">else</span><br>        state &lt;= next_state;<br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset)<br>        count &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">case</span> (state)<br>            START   :   count &lt;= <span class="hljs-number">0</span>;<br>            DATA    :   count &lt;= count + <span class="hljs-number">4&#x27;b1</span>;<br>            <span class="hljs-keyword">default</span> :   count &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset)<br>        check &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        check &lt;= odd;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset)<br>        out &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">case</span>(next_state)<br>            START   :   out &lt;= <span class="hljs-number">0</span>;<br>            DATA    :   out &lt;= &#123;in, out[<span class="hljs-number">7</span>:<span class="hljs-number">1</span>]&#125;;<br>        <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">assign</span> done = check &amp; (state == STOP);<br><span class="hljs-keyword">assign</span> out_byte = out;<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Sequence-recognition"><a href="#Sequence-recognition" class="headerlink" title="Sequence recognition"></a>Sequence recognition</h5><p><strong>Fsm hdlc</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,    <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">input</span> in,<br>    <span class="hljs-keyword">output</span> disc,<br>    <span class="hljs-keyword">output</span> flag,<br>    <span class="hljs-keyword">output</span> err);<br><br>    <span class="hljs-comment">// Define all possible states below</span><br>    <span class="hljs-keyword">parameter</span> NONE = <span class="hljs-number">0</span>, ONE = <span class="hljs-number">1</span>, TWO = <span class="hljs-number">2</span>, THREE = <span class="hljs-number">3</span>, FOUR = <span class="hljs-number">4</span>, FIVE = <span class="hljs-number">5</span>, SIX = <span class="hljs-number">6</span>, ERROR = <span class="hljs-number">7</span>, DISCARD = <span class="hljs-number">8</span>, FLAG = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-comment">// State transition logic (combinational)</span><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            NONE:next_state = in ? ONE : NONE;<br>            ONE:next_state = in ? TWO : NONE;<br>            TWO:next_state = in ? THREE : NONE;<br>            THREE:next_state = in ? FOUR : NONE;<br>            FOUR:next_state = in ? FIVE : NONE;<br>            FIVE:next_state = in ? SIX : DISCARD;<br>            SIX:next_state = in ? ERROR : FLAG;<br>            ERROR:next_state = in ? ERROR : NONE;<br>            DISCARD:next_state = in ? ONE : NONE;<br>            FLAG:next_state = in ? ONE : NONE;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// State flip-flops (sequential) with synchronous reset</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= NONE;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// State output logic</span><br>    <span class="hljs-keyword">assign</span> disc = (state == DISCARD);<br>    <span class="hljs-keyword">assign</span> flag = (state == FLAG);<br>    <span class="hljs-keyword">assign</span> err = (state == ERROR);<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q8-Design-a-Mealy-FSM"><a href="#Q8-Design-a-Mealy-FSM" class="headerlink" title="Q8: Design a Mealy FSM"></a>Q8: Design a Mealy FSM</h5><p><strong>Exams&#x2F;ece241 2013 q8</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> aresetn,    <span class="hljs-comment">// Asynchronous active-low reset</span><br>    <span class="hljs-keyword">input</span> x,<br>    <span class="hljs-keyword">output</span> z ); <br><br>    <span class="hljs-keyword">parameter</span> S0 = <span class="hljs-number">0</span>, S1 = <span class="hljs-number">1</span>, S2 = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state, next_state;<br><br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            S0  :   next_state = x ? S1 : S0;<br>            S1  :   next_state = x ? S1 : S2;<br>            S2  :   next_state = x ? S1 : S0;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">negedge</span> aresetn)<br>        <span class="hljs-keyword">if</span>(~aresetn)<br>            state &lt;= S0;<br>    <span class="hljs-keyword">else</span><br>        state &lt;= next_state;<br>    <br>    <span class="hljs-keyword">assign</span> z = (state == S2 &amp;&amp; x == <span class="hljs-number">1</span>) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q5a-Serial-two’s-complementer-Moore-FSM"><a href="#Q5a-Serial-two’s-complementer-Moore-FSM" class="headerlink" title="Q5a: Serial two’s complementer (Moore FSM)"></a>Q5a: Serial two’s complementer (Moore FSM)</h5><p><strong>Exams&#x2F;ece241 2014 q5a</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">input</span> x,<br>    <span class="hljs-keyword">output</span> z<br>); <br>    <span class="hljs-keyword">parameter</span> S0 = <span class="hljs-number">0</span>, S1 = <span class="hljs-number">1</span>, S2 = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        S0:next_state = x ? S1 : S0;<br>            S1:next_state = S2;<br>            S2:next_state = S2;<br>            <span class="hljs-keyword">default</span> : next_state = S0;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span>  areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= S0;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            z &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">case</span> (next_state)<br>                S0:z &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>                S1:z &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                S2:z &lt;= ~x;<br>            <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q5b-Serial-two’s-complementer-Mealy-FSM"><a href="#Q5b-Serial-two’s-complementer-Mealy-FSM" class="headerlink" title="Q5b: Serial two’s complementer (Mealy FSM)"></a>Q5b: Serial two’s complementer (Mealy FSM)</h5><p><strong>Exams&#x2F;ece241 2014 q5b</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">input</span> x,<br>    <span class="hljs-keyword">output</span> z<br>);<br>    <span class="hljs-keyword">localparam</span> A = <span class="hljs-number">1&#x27;b0</span>, B = <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">reg</span> state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        A:next_state = x ? B : A;<br>            B:next_state = B;<br>            <span class="hljs-keyword">default</span> : next_state = A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">assign</span> z = (state == A) ? x : ~x;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q3a-FSM"><a href="#Q3a-FSM" class="headerlink" title="Q3a: FSM"></a>Q3a: FSM</h5><p><strong>Exams&#x2F;2014 q3fsm</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,   <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">input</span> s,<br>    <span class="hljs-keyword">input</span> w,<br>    <span class="hljs-keyword">output</span> z<br>);<br><span class="hljs-keyword">parameter</span> A = <span class="hljs-number">0</span>, B = <span class="hljs-number">1</span>, B1 = <span class="hljs-number">2</span>, B2 = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] next_state;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] count;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        A:next_state &lt;= s ? B : A;<br>            B:next_state &lt;= B1;<br>            B1:next_state &lt;= B2;<br>            B2:next_state &lt;= B;<br>            <span class="hljs-keyword">default</span>:next_state &lt;= A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            count &lt;= <span class="hljs-number">2&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == B)<br>            count &lt;= w;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == B1 || state == B2)<br>            count &lt;= count + w;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">assign</span> z = (state == B &amp;&amp; count == <span class="hljs-number">2</span>) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q3b-FSM"><a href="#Q3b-FSM" class="headerlink" title="Q3b: FSM"></a>Q3b: FSM</h5><p><strong>Exams&#x2F;2014 q3bfsm</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,   <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">input</span> x,<br>    <span class="hljs-keyword">output</span> z<br>);<br>    <span class="hljs-keyword">parameter</span> A = <span class="hljs-number">3&#x27;b000</span>, B = <span class="hljs-number">3&#x27;b001</span>, C = <span class="hljs-number">3&#x27;b010</span>, D = <span class="hljs-number">3&#x27;b011</span>, E = <span class="hljs-number">3&#x27;b100</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        A:next_state &lt;= x ? B : A;<br>            B:next_state &lt;= x ? E : B;<br>            C:next_state &lt;= x ? B : C;<br>            D:next_state &lt;= x ? C : B;<br>            E:next_state &lt;= x ? E : D;<br>            <span class="hljs-keyword">default</span>:next_state &lt;= A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (state == E || state == D)<br>            z = <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">else</span><br>            z = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q3c-FSM-logic"><a href="#Q3c-FSM-logic" class="headerlink" title="Q3c: FSM logic"></a>Q3c: FSM logic</h5><p><strong>Exams&#x2F;2014 q3c</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] y,<br>    <span class="hljs-keyword">input</span> x,<br>    <span class="hljs-keyword">output</span> Y0,<br>    <span class="hljs-keyword">output</span> z<br>);<br><span class="hljs-keyword">parameter</span> A = <span class="hljs-number">3&#x27;d0</span>, B = <span class="hljs-number">3&#x27;d1</span>, C = <span class="hljs-number">3&#x27;d2</span>, D = <span class="hljs-number">3&#x27;d3</span>, E = <span class="hljs-number">3&#x27;d4</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (y)<br>            A:next_state = x ? B : A;<br>            B:next_state = x ? E : B;<br>            C:next_state = x ? B : C;<br>            D:next_state = x ? C : B;<br>            E:next_state = x ? E : D;<br>            <span class="hljs-keyword">default</span>:next_state = A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">assign</span> Y0 = (next_state == B || next_state == D);<br>    <span class="hljs-keyword">assign</span> z = (y == D || y == E);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q6b-FSM-next-state-logic"><a href="#Q6b-FSM-next-state-logic" class="headerlink" title="Q6b: FSM next-state logic"></a>Q6b: FSM next-state logic</h5><p><strong>Exams&#x2F;m2014 q6b</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">1</span>] y,<br>    <span class="hljs-keyword">input</span> w,<br>    <span class="hljs-keyword">output</span> Y2);<br><br>    <span class="hljs-keyword">localparam</span> A = <span class="hljs-number">3&#x27;d0</span>, B = <span class="hljs-number">3&#x27;d1</span>,<br>       C = <span class="hljs-number">3&#x27;d2</span>, D = <span class="hljs-number">3&#x27;d3</span>,<br>       E = <span class="hljs-number">3&#x27;d4</span>, F = <span class="hljs-number">3&#x27;d5</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (y)<br>            A:next_state = w ? A : B;<br>            B:next_state = w ? D : C;<br>            C:next_state = w ? D : E;<br>            D:next_state = w ? A : F;<br>            E:next_state = w ? D : E;<br>            F:next_state = w ? D : C;<br>            <span class="hljs-keyword">default</span>:next_state = A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">assign</span> Y2 = (next_state == C || next_state == D);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q6c-FSM-one-hot-next-state-logic"><a href="#Q6c-FSM-one-hot-next-state-logic" class="headerlink" title="Q6c: FSM one-hot next-state logic"></a>Q6c: FSM one-hot next-state logic</h5><p><strong>Exams&#x2F;m2014 q6c</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">1</span>] y,<br>    <span class="hljs-keyword">input</span> w,<br>    <span class="hljs-keyword">output</span> Y2,<br>    <span class="hljs-keyword">output</span> Y4);<br><br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] next_state;<br>    <br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">5</span>] = y[<span class="hljs-number">4</span>] &amp; ~w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">4</span>] = y[<span class="hljs-number">3</span>] &amp; ~w | y[<span class="hljs-number">5</span>] &amp; ~w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">3</span>] = y[<span class="hljs-number">2</span>] &amp; w | y[<span class="hljs-number">3</span>] &amp; w | y[<span class="hljs-number">5</span>] &amp; w | y[<span class="hljs-number">6</span>] &amp; w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">2</span>] = y[<span class="hljs-number">2</span>] &amp; ~w | y[<span class="hljs-number">6</span>] &amp; ~w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">1</span>] = y[<span class="hljs-number">1</span>] &amp; ~w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">0</span>] = y[<span class="hljs-number">1</span>] &amp; w | y[<span class="hljs-number">4</span>] &amp; w;<br>    <br>    <span class="hljs-keyword">assign</span> Y2 = next_state[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">assign</span> Y4 = next_state[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q6-FSM"><a href="#Q6-FSM" class="headerlink" title="Q6: FSM"></a>Q6: FSM</h5><p><strong>Exams&#x2F;m2014 q6</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,     <span class="hljs-comment">// synchronous reset</span><br>    <span class="hljs-keyword">input</span> w,<br>    <span class="hljs-keyword">output</span> z);<br><span class="hljs-keyword">parameter</span> A = <span class="hljs-number">3&#x27;d0</span>, B = <span class="hljs-number">3&#x27;d1</span>, C = <span class="hljs-number">3&#x27;d2</span>, D = <span class="hljs-number">3&#x27;d3</span>, E = <span class="hljs-number">3&#x27;d4</span>, F = <span class="hljs-number">3&#x27;d5</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            A:next_state = w ? A : B;<br>            B:next_state = w ? D : C;<br>            C:next_state = w ? D : E;<br>            D:next_state = w ? A : F;<br>            E:next_state = w ? D : E;<br>            F:next_state = w ? D : C;<br>            <span class="hljs-keyword">default</span>:next_state = A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            E:z = <span class="hljs-number">1&#x27;b1</span>;<br>            F:z = <span class="hljs-number">1&#x27;b1</span>;<br>            <span class="hljs-keyword">default</span>:z = <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q2a-FSM"><a href="#Q2a-FSM" class="headerlink" title="Q2a: FSM"></a>Q2a: FSM</h5><p><strong>Exams&#x2F;2012 q2fsm</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,   <span class="hljs-comment">// Synchronous active-high reset</span><br>    <span class="hljs-keyword">input</span> w,<br>    <span class="hljs-keyword">output</span> z<br>);<br><span class="hljs-keyword">parameter</span> A = <span class="hljs-number">3&#x27;d0</span>, B = <span class="hljs-number">3&#x27;d1</span>, C = <span class="hljs-number">3&#x27;d2</span>, D = <span class="hljs-number">3&#x27;d3</span>, E = <span class="hljs-number">3&#x27;d4</span>, F = <span class="hljs-number">3&#x27;d5</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            A:next_state = w ? B : A;<br>            B:next_state = w ? C : D;<br>            C:next_state = w ? E : D;<br>            D:next_state = w ? F : A;<br>            E:next_state = w ? E : D;<br>            F:next_state = w ? C : D;<br>            <span class="hljs-keyword">default</span>:next_state = A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            E:z = <span class="hljs-number">1&#x27;b1</span>;<br>            F:z = <span class="hljs-number">1&#x27;b1</span>;<br>            <span class="hljs-keyword">default</span>:z = <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q2b-One-hot-FSM-equations"><a href="#Q2b-One-hot-FSM-equations" class="headerlink" title="Q2b: One-hot FSM equations"></a>Q2b: One-hot FSM equations</h5><p><strong>Exams&#x2F;2012 q2b</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] y,<br>    <span class="hljs-keyword">input</span> w,<br>    <span class="hljs-keyword">output</span> Y1,<br>    <span class="hljs-keyword">output</span> Y3<br>);<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] next_state;<br>    <br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">5</span>] = y[<span class="hljs-number">3</span>] &amp; w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">4</span>] = y[<span class="hljs-number">2</span>] &amp; w | y[<span class="hljs-number">4</span>] &amp; w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">3</span>] = y[<span class="hljs-number">1</span>] &amp; ~w | y[<span class="hljs-number">2</span>] &amp; ~w | y[<span class="hljs-number">4</span>] &amp; ~w | y[<span class="hljs-number">5</span>] &amp; ~w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">2</span>] = y[<span class="hljs-number">1</span>] &amp; w | y[<span class="hljs-number">5</span>] &amp; w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">1</span>] = y[<span class="hljs-number">0</span>] &amp; w;<br>    <span class="hljs-keyword">assign</span> next_state[<span class="hljs-number">0</span>] = y[<span class="hljs-number">0</span>] &amp; ~w | y[<span class="hljs-number">3</span>] &amp; ~w;<br>    <br>    <span class="hljs-keyword">assign</span> Y1 = next_state[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">assign</span> Y3 = next_state[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q2a-FSM-1"><a href="#Q2a-FSM-1" class="headerlink" title="Q2a: FSM"></a>Q2a: FSM</h5><p><strong>Exams&#x2F;2013 q2afsm</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> resetn,    <span class="hljs-comment">// active-low synchronous reset</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">1</span>] r,   <span class="hljs-comment">// request</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">1</span>] g   <span class="hljs-comment">// grant</span><br>); <br><span class="hljs-keyword">localparam</span> A = <span class="hljs-number">2&#x27;b00</span>, B = <span class="hljs-number">2&#x27;b01</span>, C = <span class="hljs-number">2&#x27;b10</span>, D = <span class="hljs-number">2&#x27;b11</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            A:next_state = r[<span class="hljs-number">1</span>] ? B : (r[<span class="hljs-number">2</span>] ? C : (r[<span class="hljs-number">3</span>] ? D : A));<br>            B:next_state = r[<span class="hljs-number">1</span>] ? B : A;<br>            C:next_state = r[<span class="hljs-number">2</span>] ? C : A;<br>            D:next_state = r[<span class="hljs-number">3</span>] ? D : A;<br>            <span class="hljs-keyword">default</span>:next_state = A;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (~resetn)<br>            state &lt;= A;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (state == B)<br>            g[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == C)<br>            g[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == D)<br>            g[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            g = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Q2b-Another-FSM"><a href="#Q2b-Another-FSM" class="headerlink" title="Q2b: Another FSM"></a>Q2b: Another FSM</h5><p><strong>Exams&#x2F;2013 q2bfsm</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> resetn,    <span class="hljs-comment">// active-low synchronous reset</span><br>    <span class="hljs-keyword">input</span> x,<br>    <span class="hljs-keyword">input</span> y,<br>    <span class="hljs-keyword">output</span> f,<br>    <span class="hljs-keyword">output</span> g<br>); <br>    <span class="hljs-keyword">parameter</span> IDLE = <span class="hljs-number">4&#x27;d0</span>;<br>    <span class="hljs-keyword">parameter</span> S1 = <span class="hljs-number">4&#x27;d1</span>, S2 = <span class="hljs-number">4&#x27;d2</span>, S3 = <span class="hljs-number">4&#x27;d3</span>, S4 = <span class="hljs-number">4&#x27;d4</span>, S5 = <span class="hljs-number">4&#x27;d5</span>;<br>    <span class="hljs-keyword">parameter</span> PONE = <span class="hljs-number">4&#x27;d6</span>, PZERO = <span class="hljs-number">4&#x27;d7</span>;<br>    <span class="hljs-keyword">parameter</span> OUT = <span class="hljs-number">4&#x27;d8</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            IDLE:next_state = OUT;<br>            S1:next_state = x ? S2 : S1;<br>            S2:next_state = x ? S2 : S3;<br>            S3:next_state = x ? S4 : S1;<br>            S4:next_state = y ? PONE : S5;<br>            S5:next_state = y ? PONE : PZERO;<br>            PONE:next_state = PONE;<br>            PZERO:next_state = PZERO;<br>            OUT:next_state = S1;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (~resetn)<br>            state &lt;= IDLE;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">assign</span> f = (state == OUT);<br>    <span class="hljs-keyword">assign</span> g = (state == S4 | state == S5 || state == PONE);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="Building-Larger-Circuits"><a href="#Building-Larger-Circuits" class="headerlink" title="Building Larger Circuits"></a>Building Larger Circuits</h3><h5 id="Counter-with-period-1000"><a href="#Counter-with-period-1000" class="headerlink" title="Counter with period 1000"></a>Counter with period 1000</h5><p><strong>Exams&#x2F;review2015 count1k</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            q &lt;= <span class="hljs-number">10&#x27;h0</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= (q + <span class="hljs-number">10&#x27;h1</span>) % <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="4-bit-shift-register-and-down-counter"><a href="#4-bit-shift-register-and-down-counter" class="headerlink" title="4-bit shift register and down counter"></a>4-bit shift register and down counter</h5><p><strong>Exams&#x2F;review2015 shiftcount</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> shift_ena,<br>    <span class="hljs-keyword">input</span> count_ena,<br>    <span class="hljs-keyword">input</span> data,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (shift_ena == <span class="hljs-number">1</span>)<br>            q &lt;= &#123;q[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>], data&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count_ena == <span class="hljs-number">1</span>)<br>            q &lt;= q - <span class="hljs-number">4&#x27;b1</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= q;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="FSM-Sequence-1101-recognizer"><a href="#FSM-Sequence-1101-recognizer" class="headerlink" title="FSM: Sequence 1101 recognizer"></a>FSM: Sequence 1101 recognizer</h5><p><strong>Exams&#x2F;review2015 fsmseq</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,      <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">input</span> data,<br>    <span class="hljs-keyword">output</span> start_shifting);<br><span class="hljs-keyword">parameter</span> IDLE = <span class="hljs-number">3&#x27;b111</span>, S1 = <span class="hljs-number">3&#x27;b000</span>, S11 = <span class="hljs-number">3&#x27;b001</span>, S110 = <span class="hljs-number">3&#x27;b010</span>, S1101 = <span class="hljs-number">3&#x27;b011</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>            IDLE:next_state = data ? S1 : IDLE;<br>        S1:next_state = data ? S11 : IDLE;<br>            S11:next_state = data ? S11 : S110;<br>            S110:next_state = data ? S1101 : IDLE;<br>            S1101:next_state = S1101;<br>            <span class="hljs-keyword">default</span>:next_state = IDLE;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= IDLE;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            start_shifting &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (next_state == S1101)<span class="hljs-comment">//use next_state, not state to determine shift or not!</span><br>            start_shifting &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="FSM-Enable-shift-register"><a href="#FSM-Enable-shift-register" class="headerlink" title="FSM: Enable shift register"></a>FSM: Enable shift register</h5><p><strong>Exams&#x2F;review2015 fsmshift</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,      <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">output</span> shift_ena);<br><br>    <span class="hljs-keyword">parameter</span> IDLE = <span class="hljs-number">3&#x27;d0</span>, B0 = <span class="hljs-number">3&#x27;d1</span>, B1 = <span class="hljs-number">3&#x27;d2</span>, B2 = <span class="hljs-number">3&#x27;d3</span>, B3 = <span class="hljs-number">3&#x27;d4</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= IDLE;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        IDLE:next_state = B0;<br>            B0:next_state = B1;<br>            B1:next_state = B2;<br>            B2:next_state = B3;<br>            B3:next_state = B3;<br>            <span class="hljs-keyword">default</span>:next_state = B3;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (state == B3)<br>            shift_ena = <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span><br>            shift_ena = <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="FSM-The-complete-FSM"><a href="#FSM-The-complete-FSM" class="headerlink" title="FSM: The complete FSM"></a>FSM: The complete FSM</h5><p><strong>Exams&#x2F;review2015 fsm</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,      <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">input</span> data,<br>    <span class="hljs-keyword">output</span> shift_ena,<br>    <span class="hljs-keyword">output</span> counting,<br>    <span class="hljs-keyword">input</span> done_counting,<br>    <span class="hljs-keyword">output</span> done,<br>    <span class="hljs-keyword">input</span> ack );<br><br>    <span class="hljs-keyword">localparam</span> S = <span class="hljs-number">0</span>, S1 = <span class="hljs-number">1</span>, S11 = <span class="hljs-number">2</span>, S110 = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">localparam</span> B0 = <span class="hljs-number">4</span>, B1 = <span class="hljs-number">5</span>, B2 = <span class="hljs-number">6</span>, B3 = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">localparam</span> Count = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">localparam</span> Wait = <span class="hljs-number">9</span>;<br>    <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] state, next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= S;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        S:next_state = data ? S1 : S;<br>            S1:next_state = data ? S11 : S;<br>            S11:next_state = data ? S11 : S110;<br>            S110:next_state = data ? B0 : S;<br>            B0:next_state = B1;<br>            B1:next_state = B2;<br>            B2:next_state = B3;<br>            B3:next_state = Count;<br>            Count:next_state = done_counting ? Wait : Count;<br>            Wait:next_state = ack ? S : Wait;<br>            <span class="hljs-keyword">default</span>:next_state = S;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        shift_ena = (state == B1 || state == B2 || state == B3 || state == B0) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br>        counting = (state == Count) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br>        done = (state == Wait) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="The-complete-timer"><a href="#The-complete-timer" class="headerlink" title="The complete timer"></a>The complete timer</h5><p><strong>Exams&#x2F;review2015 fancytimer</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,      <span class="hljs-comment">// Synchronous reset</span><br>    <span class="hljs-keyword">input</span> data,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] count,<br>    <span class="hljs-keyword">output</span> counting,<br>    <span class="hljs-keyword">output</span> done,<br>    <span class="hljs-keyword">input</span> ack );<br><br>    <span class="hljs-keyword">localparam</span> S = <span class="hljs-number">0</span>, S1 = <span class="hljs-number">1</span>, S11 = <span class="hljs-number">2</span>, S110 = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">localparam</span> B0 = <span class="hljs-number">4</span>, B1 = <span class="hljs-number">5</span>, B2 = <span class="hljs-number">6</span>, B3 = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">localparam</span> Count = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">localparam</span> Wait = <span class="hljs-number">9</span>;<br>    <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] state, next_state, delay;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] counting_limit;<br>    <span class="hljs-keyword">wire</span> shift_ena, counting_done;<br><br>    <span class="hljs-keyword">assign</span> count = delay;<br>    <span class="hljs-keyword">assign</span> counting_done = (count == <span class="hljs-number">4&#x27;d0</span> &amp;&amp; counting_limit == <span class="hljs-number">10&#x27;d999</span>);<br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            state &lt;= S;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= next_state;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (state)<br>        S:next_state = data ? S1 : S;<br>            S1:next_state = data ? S11 : S;<br>            S11:next_state = data ? S11 : S110;<br>            S110:next_state = data ? B0 : S;<br>            B0:next_state = B1;<br>            B1:next_state = B2;<br>            B2:next_state = B3;<br>            B3:next_state = Count;<br>            Count:next_state = counting_done ? Wait : Count;<br>            Wait:next_state = ack ? S : Wait;<br>            <span class="hljs-keyword">default</span>:next_state = S;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            shift_ena &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (next_state == B0 || next_state == B1 || next_state == B2 || next_state == B3)<br>            shift_ena &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">else</span><br>            shift_ena &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            counting &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (next_state == Count)<br>            counting &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">else</span><br>            counting &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            done &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (next_state == Wait)<br>            done &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">else</span><br>            done &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<br>            delay &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shift_ena)<br>            delay &lt;= &#123;delay[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>], data&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (counting_limit == <span class="hljs-number">10&#x27;d999</span>)<br>            delay &lt;= delay - <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">else</span><br>            delay &lt;= delay;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(reset) <span class="hljs-keyword">begin</span><br>            counting_limit &lt;= <span class="hljs-number">10&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(counting) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(counting_limit == <span class="hljs-number">10&#x27;d999</span>) <span class="hljs-keyword">begin</span><br>                counting_limit &lt;= <span class="hljs-number">10&#x27;d0</span>;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                counting_limit &lt;= counting_limit + <span class="hljs-number">1&#x27;b1</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        counting_limit &lt;= counting_limit;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="FSM-One-hot-logic-equations"><a href="#FSM-One-hot-logic-equations" class="headerlink" title="FSM: One-hot logic equations"></a>FSM: One-hot logic equations</h5><p><strong>Exams&#x2F;review2015 fsmonehot</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">input</span> done_counting,<br>    <span class="hljs-keyword">input</span> ack,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] state,    <span class="hljs-comment">// 10-bit one-hot current state</span><br>    <span class="hljs-keyword">output</span> B3_next,<br>    <span class="hljs-keyword">output</span> S_next,<br>    <span class="hljs-keyword">output</span> S1_next,<br>    <span class="hljs-keyword">output</span> Count_next,<br>    <span class="hljs-keyword">output</span> Wait_next,<br>    <span class="hljs-keyword">output</span> done,<br>    <span class="hljs-keyword">output</span> counting,<br>    <span class="hljs-keyword">output</span> shift_ena<br>);<br><br>    <span class="hljs-comment">// You may use these parameters to access state bits using e.g., state[B2] instead of state[6].</span><br>    <span class="hljs-keyword">parameter</span> S=<span class="hljs-number">0</span>, S1=<span class="hljs-number">1</span>, S11=<span class="hljs-number">2</span>, S110=<span class="hljs-number">3</span>, B0=<span class="hljs-number">4</span>, B1=<span class="hljs-number">5</span>, B2=<span class="hljs-number">6</span>, B3=<span class="hljs-number">7</span>, Count=<span class="hljs-number">8</span>, Wait=<span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] next_state;<br>    <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        next_state[S] = state[S] &amp; ~d || state[S1] &amp; ~d || state[S110] &amp; ~d || state[Wait] &amp; ack;<br>        next_state[S1] = state[S] &amp; d;<br>        next_state[S11] = state[S1] &amp; d || state[S11] &amp; d;<br>        next_state[S110] = state[S11] &amp; ~d;<br>        next_state[B0] = state[S110] &amp; d;<br>        next_state[B1] = state[B0];<br>        next_state[B2] = state[B1];<br>        next_state[B3] = state[B2];<br>        next_state[Count] = state[B3] || state[Count] &amp; ~done_counting;<br>        next_state[Wait] = state[Count] &amp; done_counting || state[Wait] &amp; ~ack;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">assign</span> B3_next = next_state[B3];<br>    <span class="hljs-keyword">assign</span> S_next = next_state[S];<br>    <span class="hljs-keyword">assign</span> S1_next = next_state[S1];<br>    <span class="hljs-keyword">assign</span> Count_next = next_state[Count];<br>    <span class="hljs-keyword">assign</span> Wait_next = next_state[Wait];<br>    <span class="hljs-keyword">assign</span> done = state[Wait];<br>    <span class="hljs-keyword">assign</span> counting = state[Count];<br>    <span class="hljs-keyword">assign</span> shift_ena = state[B0] || state[B1] || state[B2] || state[B3];<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="Verification-Reading-Simulations"><a href="#Verification-Reading-Simulations" class="headerlink" title="Verification: Reading Simulations"></a>Verification: Reading Simulations</h2><h4 id="Finding-bugs-in-code"><a href="#Finding-bugs-in-code" class="headerlink" title="Finding bugs in code"></a>Finding bugs in code</h4><h5 id="Mux"><a href="#Mux" class="headerlink" title="Mux"></a>Mux</h5><p><strong>Bugs mux2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> sel,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out  );<br><br>    <span class="hljs-keyword">assign</span> out = sel != <span class="hljs-number">0</span> ? a : b ;<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h5 id="NAND"><a href="#NAND" class="headerlink" title="NAND"></a>NAND</h5><p><strong>Bugs nand3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<span class="hljs-keyword">input</span> a, <span class="hljs-keyword">input</span> b, <span class="hljs-keyword">input</span> c, <span class="hljs-keyword">output</span> out);<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">wire</span> outver;<br>    andgate inst1 (outver, a, b, c, <span class="hljs-number">1&#x27;b1</span>, <span class="hljs-number">1&#x27;b1</span>);<br>    <span class="hljs-keyword">assign</span> out = ~outver;<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Mux-1"><a href="#Mux-1" class="headerlink" title="Mux"></a>Mux</h5><p><strong>Bugs mux4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] sel,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] c,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] d,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out  ); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] mux0, mux1;<br>    mux2 mux_0 ( sel[<span class="hljs-number">0</span>],    a,    b, mux0 );<br>    mux2 mux_1 ( sel[<span class="hljs-number">0</span>],    c,    d, mux1 );<br>    mux2 mux_2 ( sel[<span class="hljs-number">1</span>], mux0, mux1,  out );<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Add-x2F-sub"><a href="#Add-x2F-sub" class="headerlink" title="Add&#x2F;sub"></a>Add&#x2F;sub</h5><p><strong>Bugs addsubz</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// synthesis verilog_input_version verilog_2001</span><br><span class="hljs-keyword">module</span> top_module ( <br>    <span class="hljs-keyword">input</span> do_sub,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> result_is_zero<br>);<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (do_sub)<br>            out = a - b;<br>        <span class="hljs-keyword">else</span><br>            out = a + b;<br>        <span class="hljs-keyword">if</span> (out == <span class="hljs-number">8&#x27;b0</span>)<br>            result_is_zero = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>result_is_zero = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Case-statement-1"><a href="#Case-statement-1" class="headerlink" title="Case statement"></a>Case statement</h5><p><strong>Bugs case</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] code,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] out,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> valid);<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        valid = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> (code)<br>            <span class="hljs-number">8&#x27;h45</span>: out = <span class="hljs-number">0</span>;<br>            <span class="hljs-number">8&#x27;h16</span>: out = <span class="hljs-number">1</span>;<br>            <span class="hljs-number">8&#x27;h1e</span>: out = <span class="hljs-number">2</span>;<br>            <span class="hljs-number">8&#x27;h26</span>: out = <span class="hljs-number">3</span>;<br>            <span class="hljs-number">8&#x27;h25</span>: out = <span class="hljs-number">4</span>;<br>            <span class="hljs-number">8&#x27;h2e</span>: out = <span class="hljs-number">5</span>;<br>            <span class="hljs-number">8&#x27;h36</span>: out = <span class="hljs-number">6</span>;<br>            <span class="hljs-number">8&#x27;h3d</span>: out = <span class="hljs-number">7</span>;<br>            <span class="hljs-number">8&#x27;h3e</span>: out = <span class="hljs-number">8</span>;<br>            <span class="hljs-number">8&#x27;h46</span>: out = <span class="hljs-number">9</span>;<br>            <span class="hljs-keyword">default</span>: <span class="hljs-keyword">begin</span> <br>                valid = <span class="hljs-number">0</span>;<br>                out = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Build-a-circuit-from-a-simulation-waveform"><a href="#Build-a-circuit-from-a-simulation-waveform" class="headerlink" title="Build a circuit from a simulation waveform"></a>Build a circuit from a simulation waveform</h4><h5 id="Combinational-circuit-1"><a href="#Combinational-circuit-1" class="headerlink" title="Combinational circuit 1"></a>Combinational circuit 1</h5><p><strong>Sim&#x2F;circuit1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">output</span> q );<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">assign</span> q = a &amp; b;<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combinational-circuit-2"><a href="#Combinational-circuit-2" class="headerlink" title="Combinational circuit 2"></a>Combinational circuit 2</h5><p><strong>Sim&#x2F;circuit2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> q );<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">assign</span> q = ~ (a ^ b ^ c ^ d);<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combinational-circuit-3"><a href="#Combinational-circuit-3" class="headerlink" title="Combinational circuit 3"></a>Combinational circuit 3</h5><p><strong>Sim&#x2F;circuit3</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> q );<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">assign</span> q = (a | b) &amp; (c | d);<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combinational-circuit-4"><a href="#Combinational-circuit-4" class="headerlink" title="Combinational circuit 4"></a>Combinational circuit 4</h5><p><strong>Sim&#x2F;circuit4</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> c,<br>    <span class="hljs-keyword">input</span> d,<br>    <span class="hljs-keyword">output</span> q );<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">assign</span> q = b | c; <span class="hljs-comment">// Fix me</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combinational-circuit-5"><a href="#Combinational-circuit-5" class="headerlink" title="Combinational circuit 5"></a>Combinational circuit 5</h5><p><strong>Sim&#x2F;circuit5</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] c,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] d,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] e,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q );<br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (c)<br>            <span class="hljs-number">4&#x27;h0</span>:q &lt;= b;<br>            <span class="hljs-number">4&#x27;h1</span>:q &lt;= e;<br>            <span class="hljs-number">4&#x27;h2</span>:q &lt;= a;<br>            <span class="hljs-number">4&#x27;h3</span>:q &lt;= d;<br>            <span class="hljs-keyword">default</span> :q &lt;= <span class="hljs-number">4&#x27;hf</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Combinational-circuit-6"><a href="#Combinational-circuit-6" class="headerlink" title="Combinational circuit 6"></a>Combinational circuit 6</h5><p><strong>Sim&#x2F;circuit6</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] q ); <br>    <span class="hljs-keyword">always</span> @ (*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (a)<br>            <span class="hljs-number">3&#x27;h0</span>:q &lt;= <span class="hljs-number">16&#x27;h1232</span>;<br>            <span class="hljs-number">3&#x27;h1</span>:q &lt;= <span class="hljs-number">16&#x27;haee0</span>;<br>            <span class="hljs-number">3&#x27;h2</span>:q &lt;= <span class="hljs-number">16&#x27;h27d4</span>;<br>            <span class="hljs-number">3&#x27;h3</span>:q &lt;= <span class="hljs-number">16&#x27;h5a0e</span>;<br>            <span class="hljs-number">3&#x27;h4</span>:q &lt;= <span class="hljs-number">16&#x27;h2066</span>;<br><span class="hljs-number">3&#x27;h5</span>:q &lt;= <span class="hljs-number">16&#x27;h64ce</span>;<br>            <span class="hljs-number">3&#x27;h6</span>:q &lt;= <span class="hljs-number">16&#x27;hc526</span>;<br>            <span class="hljs-number">3&#x27;h7</span>:q &lt;= <span class="hljs-number">16&#x27;h2f19</span>;<br>            <span class="hljs-keyword">default</span>:q &lt;= <span class="hljs-number">16&#x27;h0</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Sequential-circuit-7"><a href="#Sequential-circuit-7" class="headerlink" title="Sequential circuit 7"></a>Sequential circuit 7</h5><p><strong>Sim&#x2F;circuit7</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">output</span> q );<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    q &lt;= ~a;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Sequential-circuit-8"><a href="#Sequential-circuit-8" class="headerlink" title="Sequential circuit 8"></a>Sequential circuit 8</h5><p><strong>Sim&#x2F;circuit8</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clock,<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">output</span> p,<br>    <span class="hljs-keyword">output</span> q );<br><span class="hljs-keyword">reg</span> state;<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">negedge</span> clock) <span class="hljs-keyword">begin</span><br>    state &lt;= a;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">negedge</span> clock) <span class="hljs-keyword">begin</span><br>    q &lt;= a;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> p = clock ? a : state;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Sequential-circuit-9"><a href="#Sequential-circuit-9" class="headerlink" title="Sequential circuit 9"></a>Sequential circuit 9</h5><p><strong>Sim&#x2F;circuit9</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] q );<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (a)<br>            q &lt;= <span class="hljs-number">4&#x27;h4</span>;<br>        <span class="hljs-keyword">else</span><br>            q &lt;= (q + <span class="hljs-number">4&#x27;h1</span>) % <span class="hljs-number">4&#x27;h7</span>; <br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Sequential-circuit-10"><a href="#Sequential-circuit-10" class="headerlink" title="Sequential circuit 10"></a>Sequential circuit 10</h5><p><strong>Sim&#x2F;circuit10</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> a,<br>    <span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">output</span> q,<br>    <span class="hljs-keyword">output</span> state  );<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (a == b)<br>            state &lt;= a;<br>        <span class="hljs-keyword">else</span><br>            state &lt;= state;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> q = (a == b) ? state : (~state);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="Verification-Writing-Testbenches"><a href="#Verification-Writing-Testbenches" class="headerlink" title="Verification: Writing Testbenches"></a>Verification: Writing Testbenches</h2><h5 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h5><p><strong>Tb&#x2F;clock</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ();<br>    <span class="hljs-keyword">reg</span> clk;<br> <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        clk = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>    #<span class="hljs-number">5</span> clk = ~clk;<br> <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    dut dut_0 (clk);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Testbench-1"><a href="#Testbench-1" class="headerlink" title="Testbench 1"></a>Testbench 1</h5><p><strong>Tb&#x2F;tb1</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ( <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> A, <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> B );<span class="hljs-comment">//</span><br><br>    <span class="hljs-comment">// generate input patterns here</span><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>A &lt;= <span class="hljs-number">0</span>;<br>        B &lt;= <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> A &lt;= ~A;<br>        #<span class="hljs-number">5</span>  B &lt;= ~B;<br>        #<span class="hljs-number">5</span>  A &lt;= ~A;<br>        #<span class="hljs-number">20</span> B &lt;= ~B;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="AND-gate-1"><a href="#AND-gate-1" class="headerlink" title="AND gate"></a>AND gate</h5><p><strong>Tb&#x2F;and</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module();<br><span class="hljs-keyword">reg</span> a, b;<br>    <span class="hljs-keyword">wire</span> out;<br>    andgate andgate_0 (&#123;a, b&#125;, out);<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    a = <span class="hljs-number">0</span>;b = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">0</span>;b = <span class="hljs-number">1</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1</span>;b = <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span> a = <span class="hljs-number">1</span>;b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="Testbench2"><a href="#Testbench2" class="headerlink" title="Testbench2"></a>Testbench2</h5><p><strong>Tb&#x2F;tb2</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module();<br><span class="hljs-keyword">reg</span> clk;<br>    <span class="hljs-keyword">reg</span> in;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] S;<br>    <span class="hljs-keyword">wire</span> out;<br>    q7 q7_ins (clk, in, S, out);<br>    <br>    <span class="hljs-keyword">always</span> #<span class="hljs-number">5</span> clk = ~clk;<br>    <br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    clk &lt;= <span class="hljs-number">0</span>;<br>        in &lt;= <span class="hljs-number">0</span>;<br>        S &lt;= <span class="hljs-number">3&#x27;b010</span>;<br>        #<span class="hljs-number">10</span> S &lt;= <span class="hljs-number">3&#x27;b110</span>;<br>        #<span class="hljs-number">10</span> in &lt;= <span class="hljs-number">1</span>; S &lt;= <span class="hljs-number">3&#x27;b010</span>;<br>        #<span class="hljs-number">10</span> in &lt;= <span class="hljs-number">0</span>; S &lt;= <span class="hljs-number">3&#x27;b111</span>;<br>        #<span class="hljs-number">10</span> in &lt;= <span class="hljs-number">1</span>; S &lt;= <span class="hljs-number">3&#x27;b000</span>;<br>        #<span class="hljs-number">30</span> in &lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="T-flip-flop"><a href="#T-flip-flop" class="headerlink" title="T flip-flop"></a>T flip-flop</h5><p><strong>Tb&#x2F;tff</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module ();<br><span class="hljs-keyword">reg</span> clk;<br>    <span class="hljs-keyword">reg</span> reset;<br>    <span class="hljs-keyword">reg</span> t;<br>    <span class="hljs-keyword">wire</span> q;<br>    <br>    tff tff0 (<span class="hljs-variable">.clk</span>(clk),<br>              <span class="hljs-variable">.reset</span>(reset),<br>              <span class="hljs-variable">.t</span>(t),<br>              <span class="hljs-variable">.q</span>(q));<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        clk = <span class="hljs-number">0</span>;<br>        reset = <span class="hljs-number">1&#x27;b1</span>;<br>        t = <span class="hljs-number">1&#x27;b0</span>;<br>        #<span class="hljs-number">10</span><br>        reset = <span class="hljs-number">1&#x27;b0</span>;<br>        t = <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">always</span> #<span class="hljs-number">5</span> clk = ~clk;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="Additional-Questions"><a href="#Additional-Questions" class="headerlink" title="Additional Questions"></a>Additional Questions</h2><h3 id="CS450"><a href="#CS450" class="headerlink" title="CS450"></a>CS450</h3><h5 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h5><p><strong>Cs450&#x2F;timer</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br><span class="hljs-keyword">input</span> clk, <br><span class="hljs-keyword">input</span> load, <br><span class="hljs-keyword">input</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] data, <br><span class="hljs-keyword">output</span> tc<br>);<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] counter;<br><br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<br>            counter &lt;= data;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (counter != <span class="hljs-number">0</span>)<br>            counter &lt;= counter - <span class="hljs-number">10&#x27;d1</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">assign</span> tc = !counter;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="counter-2bc"><a href="#counter-2bc" class="headerlink" title="counter 2bc"></a>counter 2bc</h5><p><strong>Cs450&#x2F;counter 2bc</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state<br>);<br><span class="hljs-keyword">localparam</span> SNT = <span class="hljs-number">2&#x27;b00</span>;<br><span class="hljs-keyword">localparam</span> WNT = <span class="hljs-number">2&#x27;b01</span>;<br><span class="hljs-keyword">localparam</span> WT = <span class="hljs-number">2&#x27;b10</span>;<br>    <span class="hljs-keyword">localparam</span> ST = <span class="hljs-number">2&#x27;b11</span>;<br>    <br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            state &lt;= WNT;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (train_valid) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_taken)<br>                state &lt;= (state == ST) ? ST : (state + <span class="hljs-number">2&#x27;b1</span>);<br>            <span class="hljs-keyword">else</span><br>                state &lt;= (state == SNT) ? SNT : (state - <span class="hljs-number">2&#x27;b1</span>);<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="history-shift"><a href="#history-shift" class="headerlink" title="history shift"></a>history shift</h5><p><strong>Cs450&#x2F;history shift</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span> predict_valid,<br>    <span class="hljs-keyword">input</span> predict_taken,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] train_history<br>);<br>    <span class="hljs-keyword">always</span> @ (<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<br>            predict_history &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (train_mispredicted)<br>            predict_history &lt;= &#123;train_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>], train_taken&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid)<br>            predict_history &lt;= &#123;predict_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>], predict_taken&#125;;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="gshare"><a href="#gshare" class="headerlink" title="gshare"></a>gshare</h5><p><strong>Cs450&#x2F;gshare</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span>  predict_valid,<br>    <span class="hljs-keyword">input</span>  [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_pc,<br>    <span class="hljs-keyword">output</span> predict_taken,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_history,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_pc<br>);<br>    <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] PHT[<span class="hljs-number">127</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk, <span class="hljs-keyword">posedge</span> areset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset) <span class="hljs-keyword">begin</span><br>            predict_history &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">128</span>; i=i+<span class="hljs-number">1</span>) PHT[i] &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_valid &amp;&amp; train_mispredicted)<br>                predict_history &lt;= &#123;train_history[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>], train_taken&#125;;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid)<br>                predict_history &lt;= &#123;predict_history[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>], predict_taken&#125;;<br>            <br>            <span class="hljs-keyword">if</span> (train_valid) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (train_taken)<br>                    PHT[train_history ^ train_pc] &lt;= (PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b11</span>) ? <span class="hljs-number">2&#x27;b11</span> : (PHT[train_history ^ train_pc] + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                    PHT[train_history ^ train_pc] &lt;= (PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b00</span>) ? <span class="hljs-number">2&#x27;b00</span> : (PHT[train_history ^ train_pc] - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> predict_taken = PHT[predict_history ^ predict_pc][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HDLBits</tag>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown use</title>
    <link href="/2022/06/07/Markdown-use/"/>
    <url>/2022/06/07/Markdown-use/</url>
    
    <content type="html"><![CDATA[<h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="This-is-a-H3"><a href="#This-is-a-H3" class="headerlink" title="This is a H3"></a>This is a H3</h3><h4 id="This-is-a-H4"><a href="#This-is-a-H4" class="headerlink" title="This is a H4"></a>This is a H4</h4><h5 id="This-is-a-H5"><a href="#This-is-a-H5" class="headerlink" title="This is a H5"></a>This is a H5</h5><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><blockquote><p>No one is free, even the birds are chained to the sky – Bob Dylan</p></blockquote><blockquote><p><del>This is a blank line</del></p><blockquote><p>People seldom do what they believe in. They do what is convenient, then report.   – Bob Dylan</p></blockquote><p><del>This is a blank line</del></p><blockquote><p>Inside every cynical person, there is a disappointed idealist–George Carlin</p></blockquote></blockquote><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h4 id="Things-of-RGB"><a href="#Things-of-RGB" class="headerlink" title="Things of RGB?"></a>Things of RGB?</h4><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h4 id="Arrange-of-tomorrow"><a href="#Arrange-of-tomorrow" class="headerlink" title="Arrange of tomorrow:"></a>Arrange of tomorrow:</h4><ul><li>meeting (11:am)</li><li>slove #2152 problem</li><li>…</li></ul><h4 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h4><ul><li><input disabled="" type="checkbox"> a task list item</li><li><input disabled="" type="checkbox"> task a</li><li><input disabled="" type="checkbox"> list syntax required</li><li><input checked="" disabled="" type="checkbox"> normal <strong>formatting</strong>, @mentions, #1234 refs</li><li><input disabled="" type="checkbox"> incomplete</li><li><input checked="" disabled="" type="checkbox"> completed</li></ul><h2 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="(Fenced) Code Blocks"></a>(Fenced) Code Blocks</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">```c<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    pritf(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);<br>&#125;<br>```<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">```cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span> &lt;&lt; endl;<br>&#125;<span class="hljs-comment">//syntax highlighting</span><br>```<br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog">```verilog<br><span class="hljs-keyword">module</span> Accumulator (<br>    <span class="hljs-keyword">input</span>  <span class="hljs-keyword">logic</span>        clk,<br>    <span class="hljs-keyword">input</span>  <span class="hljs-keyword">logic</span>        direction,<br>    <span class="hljs-keyword">input</span>  <span class="hljs-keyword">logic</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] increment,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] result<br>);<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] next;<br>    <span class="hljs-keyword">always_comb</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (direction)<br>            next = result + increment;<br>        <span class="hljs-keyword">else</span><br>            next = result - increment;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always_ff</span> @(<span class="hljs-keyword">posedge</span> clk)<br>        result &lt;= next;<br><span class="hljs-keyword">endmodule</span><br>```<br></code></pre></td></tr></table></figure><h2 id="Math-Blocks"><a href="#Math-Blocks" class="headerlink" title="Math Blocks"></a>Math Blocks</h2><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><table><thead><tr><th align="center">First Header</th><th align="center">Second Header</th></tr></thead><tbody><tr><td align="center">Content Cell0</td><td align="center">Content Cell1</td></tr><tr><td align="center">Content Cell2</td><td align="center">Content Cell3</td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h2 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h2><p>You can create footnotes like this[^footnote]</p><p>[^footnote]: Here is the <em>text</em> of the ‘footnote’</p><p>LLHD<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="A low level hardware description language which be used as an intermediate representation for digital circuit description.">[1]</span></a></sup> separates input languages from EDA tools such as simulators, synthesizers, and placers&#x2F;routers.</p><h2 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h2><p>input *** to draw a horizontal line</p><hr><p>input — to draw a horizontal line</p><hr><h2 id="Table-of-Contents-TOC"><a href="#Table-of-Contents-TOC" class="headerlink" title="Table of Contents (TOC)"></a>Table of Contents (TOC)</h2><p>Input [toc] and press the return key. This will create a “Table of Contents” section.</p><p>[toc]</p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>Markdown supports two styles of link: <code>inline</code> and <code>reference</code>.</p><p>in both styles, the link text is delimited by [square brackets]</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>](<span class="hljs-link">http://example.com/&quot;Title&quot;</span>) inline link.<br><br>[<span class="hljs-string">This link</span>](<span class="hljs-link">http://example.org/</span>) has no title attribute.<br></code></pre></td></tr></table></figure><p>This is <a href="http://example.com/" title="Title">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p><p><a href="http://example.net/">This link</a> has no title attribute.(<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p><h4 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h4><p><strong>You can set the href to headers</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p><h4 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>][<span class="hljs-symbol">id</span>] reference-style link.<br><br>Then, anywhere in the document, you define your link label on a line by itself like this:<br><br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://example.com/ &quot;Optional Title Here&quot; </span><br></code></pre></td></tr></table></figure><p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets - for example, to link the word “Google” to the google.com web site, you could simply write.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">Google</span>][<span class="hljs-symbol"></span>]<br>And then define the link:<br><br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">https://www.google.com/</span><br></code></pre></td></tr></table></figure><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p><code>&lt;i@typora.io&gt;</code> becomes <a href="mailto:&#x69;&#x40;&#x74;&#x79;&#x70;&#111;&#114;&#x61;&#46;&#105;&#x6f;">&#x69;&#x40;&#x74;&#x79;&#x70;&#111;&#114;&#x61;&#46;&#105;&#x6f;</a>.</p><p><code>&lt;dafs@gmail.com&gt;</code> becomes <a href="mailto:&#x64;&#97;&#102;&#115;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x64;&#97;&#102;&#115;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p><img src="/../../../../Pictures/20200225172916502.gif" alt="LFSR" title="LFSR"></p><p><img src="/../../../../Pictures/v2-c324540eaef22d766ba200a6d181c31c_720w.jpg" alt="SHIFT"></p><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*single asterisks*</span><br><br><span class="hljs-emphasis">_single underscores_</span><br></code></pre></td></tr></table></figure><p><code>Output</code></p><p><em>single asterisk</em></p><p><em>single underscores</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*wow_great_stuff*</span><br><br><span class="hljs-emphasis">_do_</span>this<span class="hljs-emphasis">_and_</span>do<span class="hljs-emphasis">_that_</span>and<span class="hljs-emphasis">_another_</span>thing<span class="hljs-emphasis">_</span><br></code></pre></td></tr></table></figure><p><code>Output</code></p><p><em>wow_great_stuff</em></p><p><em>do_this_and_do_that_and_another_thing</em></p><p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*\*</span>this text is surrounded by literal asterisks\<span class="hljs-strong">**</span><br><span class="hljs-strong"><span class="hljs-emphasis">_\_</span>this text is surrounded by literal asterisks\_<span class="hljs-emphasis">_</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">_</span>\<span class="hljs-emphasis">*this text is surrounded by literal asterisks\*</span><span class="hljs-emphasis">_</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">*\_</span>this text is surrounded by literal asterisks\<span class="hljs-emphasis">_*</span></span><br></code></pre></td></tr></table></figure><p><code>Output</code></p><p><em>*this text is surrounded by literal asterisks*</em></p><p><em>_this text is surrounded by literal asterisks_</em></p><p><em>*this text is surrounded by literal asterisks*</em></p><p><em>_this text is surrounded by literal asterisks_</em></p><p><strong>recommends using the <code>*</code> symbol</strong></p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**double asterisks**</span><br><span class="hljs-strong">__double underscores__</span><br></code></pre></td></tr></table></figure><p><code>Output</code></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p><strong>recommends using the <code>**</code> symbol</strong></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (&#96;). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Use the <span class="hljs-code">`printf()`</span> function.<br></code></pre></td></tr></table></figure><p><code>Output</code></p><p>Use the <code>printf()</code> function.</p><h3 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p><p><code>~~Mistaken text~~</code> becomes <del>Mistaken text</del></p><h3 id="Underlines"><a href="#Underlines" class="headerlink" title="Underlines"></a>Underlines</h3><p>Underlines is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u></p><h3 id="Emoji-smile-cat"><a href="#Emoji-smile-cat" class="headerlink" title="Emoji :smile_cat:"></a>Emoji :smile_cat:</h3><p>:joy: :smile: :cry: :anger: :cat: :cloud_with_lightning:</p><p>use <code>:smile</code> <code>:joy</code> <code>:cat</code>…</p><h3 id="Inline-Math"><a href="#Inline-Math" class="headerlink" title="Inline Math"></a>Inline Math</h3><p>use <code>$</code> to warp a TeX command</p><p><code>$\lim_&#123;x \to \infty&#125; \exp(-x) = 0$</code> will be rendered as LaTex command</p><p>$\lim_{x \to \infty} \exp(-x) &#x3D; 0$</p><h3 id="Subscript"><a href="#Subscript" class="headerlink" title="Subscript"></a>Subscript</h3><p>use <code>~</code> to warp subscript content. For example: <code>H~2~O</code>, <code>X~long\ text~</code></p><p>H<del>2</del>O</p><p>X<del>long\ text</del></p><h3 id="Superscript"><a href="#Superscript" class="headerlink" title="Superscript"></a>Superscript</h3><p>use <code>^</code> to warp superscript content.</p><p><code>X^2^</code> —–&gt; X^2^</p><h3 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h3><p>use <code>==</code> to wrap highlight content.</p><p><code>==Highlight==</code> ——&gt; &#x3D;&#x3D;Highlight&#x3D;&#x3D;</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>use HTML to style content what pure Markdown does not support.</p><p>Example: <span style="color:red">this text is red</span></p><h3 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;265&#x27;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;Fancy Animated SVG Menu&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#x27;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">allowtransparency</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 100%;&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure><iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Sunsets don&#39;t get much better than this one over <a href="https://twitter.com/GrandTetonNPS?ref_src=twsrc%5Etfw">@GrandTetonNPS</a>. <a href="https://twitter.com/hashtag/nature?src=hash&amp;ref_src=twsrc%5Etfw">#nature</a> <a href="https://twitter.com/hashtag/sunset?src=hash&amp;ref_src=twsrc%5Etfw">#sunset</a> <a href="http://t.co/YuKy2rcjyU">pic.twitter.com/YuKy2rcjyU</a></p>&mdash; US Department of the Interior (@Interior) <a href="https://twitter.com/Interior/status/463440424141459456?ref_src=twsrc%5Etfw">May 5, 2014</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>use the <code>&lt;video&gt;</code> HTML tag to embed videos.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx.mp4&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=327623069&amp;bvid=BV1JA411h7Gw&amp;cid=171385214&amp;page=1&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>A low level hardware description language which be used as an intermediate representation for digital circuit description.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Biginer</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
